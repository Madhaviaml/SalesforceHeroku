#!/usr/bin/env node
"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var spawn = require('child_process').spawn;
function executeJar(jarFile) {
    var userArgs = process.argv
        .slice(2)
        .map(function (it) { return it.replace(/(?:\\r\\n|\\r|\\n)/g, '\n'); });
    var command = spawn('java', __spreadArrays(['-jar', jarFile], userArgs));
    command.stdout.pipe(process.stdout);
    command.stderr.pipe(process.stderr);
    command.on('close', function (code) {
        process.exit(code);
    });
}
function search(dir, regex) {
    var result = [];
    for (var _i = 0, _a = fs_1.default.readdirSync(dir); _i < _a.length; _i++) {
        var file = _a[_i];
        var filePath = path_1.default.join(dir, file);
        var filePathString = filePath.replace(/\\/g, '/');
        var stat = fs_1.default.statSync(filePath);
        if (stat.isFile() && new RegExp(regex).test(filePathString)) {
            result.push(filePathString);
        }
        else if (stat.isDirectory()) {
            result = result.concat(search(filePath, regex));
        }
    }
    return result;
}
function resolveRunnableJar(regexp, path) {
    var found = search(path, regexp);
    if (found.length > 1) {
        throw "Multiple matches of " + regexp + " in " + path + " " + JSON.stringify(found);
    }
    if (found.length == 0) {
        throw "No matches of " + regexp + " in " + path;
    }
    return found[0];
}
function run(userPath) {
    var packageJsonPathOfUser = path_1.default.join(userPath, 'package.json');
    var packageJsonOfUser = require(packageJsonPathOfUser);
    var runnableJarRegexpAttr = 'runnable-jar-regexp';
    var runnableJarRegexp = packageJsonOfUser[runnableJarRegexpAttr];
    if (!runnableJarRegexp) {
        throw "Did not find " + runnableJarRegexpAttr + " within " + JSON.stringify(packageJsonOfUser);
    }
    var runnableJar = resolveRunnableJar(runnableJarRegexp, userPath);
    executeJar(runnableJar);
}
exports.run = run;
//# sourceMappingURL=index.js.map