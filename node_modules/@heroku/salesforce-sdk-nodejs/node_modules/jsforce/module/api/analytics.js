import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Manages Salesforce Analytics API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import { ReportMetadata, ReportExecuteResult, ReportRetrieveResult, ReportDescribeResult, ReportInfo, ReportInstanceInfo, DashboardMetadata, DashboardResult, DashboardStatusResult, DashboardRefreshResult, DashboardInfo } from './analytics/types';
/*----------------------------------------------------------------------------------*/
export { ReportMetadata, ReportExecuteResult, ReportRetrieveResult, ReportDescribeResult, ReportInfo, ReportInstanceInfo, DashboardMetadata, DashboardResult, DashboardStatusResult, DashboardRefreshResult, DashboardInfo };
/*----------------------------------------------------------------------------------*/
/**
 * Report object class in Analytics API
 */
export class ReportInstance {
  /**
   *
   */
  constructor(report, id) {
    _defineProperty(this, "_report", void 0);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    this._report = report;
    this._conn = report._conn;
    this.id = id;
  }

  /**
   * Retrieve report result asynchronously executed
   */
  retrieve() {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this._report.id, 'instances', this.id].join('/');
    return this._conn.request(url);
  }
}

/*----------------------------------------------------------------------------------*/
/**
 * Report object class in Analytics API
 */
export class Report {
  /**
   *
   */
  constructor(conn, id) {
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "delete", this.destroy);
    _defineProperty(this, "del", this.destroy);
    _defineProperty(this, "run", this.execute);
    _defineProperty(this, "exec", this.execute);
    this._conn = conn;
    this.id = id;
  }

  /**
   * Describe report metadata
   */
  describe() {
    var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'describe'].join('/');
    return this._conn.request(url);
  }

  /**
   * Destroy a report
   */
  destroy() {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/');
    return this._conn.request({
      method: 'DELETE',
      url
    });
  }

  /**
   * Synonym of Analytics~Report#destroy()
   */

  /**
   * Synonym of Analytics~Report#destroy()
   */

  /**
   * Clones a given report
   */
  clone(name) {
    const url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/') + '?cloneId=' + this.id;
    const config = {
      reportMetadata: {
        name
      }
    };
    return this._conn.request({
      method: 'POST',
      url,
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(config)
    });
  }

  /**
   * Explain plan for executing report
   */
  explain() {
    const url = '/query/?explain=' + this.id;
    return this._conn.request(url);
  }

  /**
   * Run report synchronously
   */
  execute(options = {}) {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/') + '?includeDetails=' + (options.details ? 'true' : 'false');
    return this._conn.request(_objectSpread({
      url
    }, options.metadata ? {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(options.metadata)
    } : {
      method: 'GET'
    }));
  }

  /**
   * Synonym of Analytics~Report#execute()
   */

  /**
   * Synonym of Analytics~Report#execute()
   */

  /**
   * Run report asynchronously
   */
  executeAsync(options = {}) {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/') + (options.details ? '?includeDetails=true' : '');
    return this._conn.request(_objectSpread({
      method: 'POST',
      url
    }, options.metadata ? {
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(options.metadata)
    } : {
      body: ''
    }));
  }

  /**
   * Get report instance for specified instance ID
   */
  instance(id) {
    return new ReportInstance(this, id);
  }

  /**
   * List report instances which had been executed asynchronously
   */
  instances() {
    const url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/');
    return this._conn.request(url);
  }
}

/*----------------------------------------------------------------------------------*/
/**
 * Dashboard object class in the Analytics API
 */
export class Dashboard {
  /**
   *
   */
  constructor(conn, id) {
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "delete", this.destroy);
    _defineProperty(this, "del", this.destroy);
    this._conn = conn;
    this.id = id;
  }

  /**
   * Describe dashboard metadata
   *
   * @method Analytics~Dashboard#describe
   * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function
   * @returns {Promise.<Analytics-DashboardMetadata>}
   */
  describe() {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'describe'].join('/');
    return this._conn.request(url);
  }

  /**
   * Get details about dashboard components
   */
  components(componentIds) {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
    const config = {
      componentIds: _Array$isArray(componentIds) ? componentIds : typeof componentIds === 'string' ? [componentIds] : undefined
    };
    return this._conn.request({
      method: 'POST',
      url,
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(config)
    });
  }

  /**
   * Get dashboard status
   */
  status() {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'status'].join('/');
    return this._conn.request(url);
  }

  /**
   * Refresh a dashboard
   */
  refresh() {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
    return this._conn.request({
      method: 'PUT',
      url,
      body: ''
    });
  }

  /**
   * Clone a dashboard
   */
  clone(config, folderId) {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/') + '?cloneId=' + this.id;
    if (typeof config === 'string') {
      config = {
        name: config,
        folderId
      };
    }
    return this._conn.request({
      method: 'POST',
      url,
      headers: {
        'Content-Type': 'application/json'
      },
      body: _JSON$stringify(config)
    });
  }

  /**
   * Destroy a dashboard
   */
  destroy() {
    const url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
    return this._conn.request({
      method: 'DELETE',
      url
    });
  }

  /**
   * Synonym of Analytics~Dashboard#destroy()
   */

  /**
   * Synonym of Analytics~Dashboard#destroy()
   */
}

/*----------------------------------------------------------------------------------*/
/**
 * API class for Analytics API
 */
export class Analytics {
  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);
    this._conn = conn;
  }

  /**
   * Get report object of Analytics API
   */
  report(id) {
    return new Report(this._conn, id);
  }

  /**
   * Get recent report list
   */
  reports() {
    const url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/');
    return this._conn.request(url);
  }

  /**
   * Get dashboard object of Analytics API
   */
  dashboard(id) {
    return new Dashboard(this._conn, id);
  }

  /**
   * Get recent dashboard list
   */
  dashboards() {
    var url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/');
    return this._conn.request(url);
  }
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('analytics', conn => new Analytics(conn));
export default Analytics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,