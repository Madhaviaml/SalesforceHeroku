import "core-js/modules/es.array.iterator";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
/**
 * @file Manages Tooling APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import Connection from '../connection';
import Cache from '../cache';

/**
 *
 */

/**
 *
 */
const {
  query,
  queryMore,
  create,
  _createSingle,
  _createMany,
  _createParallel,
  retrieve,
  _retrieveSingle,
  _retrieveParallel,
  _retrieveMany,
  update,
  _updateSingle,
  _updateParallel,
  _updateMany,
  upsert,
  destroy,
  _destroySingle,
  _destroyParallel,
  _destroyMany,
  describe,
  describeGlobal,
  sobject
} = Connection.prototype;
const describeCacheKey = type => type ? `describe.${type}` : 'describe';

/**
 * API class for Tooling API call
 */
export class Tooling {
  /**
   * Execute query by using SOQL
   */

  /**
   * Query next record set by using query locator
   */

  /**
   * Create records
   */

  /**
   * Synonym of Tooling#create()
   */

  /**
   * Retrieve specified records
   */

  /**
   * Update records
   */

  /**
   * Upsert records
   */

  /**
   * Delete records
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Describe SObject metadata
   */

  /**
   * Synonym of Tooling#describe()
   */

  /**
   * Describe global SObjects
   */

  /**
   * Get SObject instance
   */

  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "query", query);
    _defineProperty(this, "queryMore", queryMore);
    _defineProperty(this, "create", create);
    _defineProperty(this, "_createSingle", _createSingle);
    _defineProperty(this, "_createParallel", _createParallel);
    _defineProperty(this, "_createMany", _createMany);
    _defineProperty(this, "insert", create);
    _defineProperty(this, "retrieve", retrieve);
    _defineProperty(this, "_retrieveSingle", _retrieveSingle);
    _defineProperty(this, "_retrieveParallel", _retrieveParallel);
    _defineProperty(this, "_retrieveMany", _retrieveMany);
    _defineProperty(this, "update", update);
    _defineProperty(this, "_updateSingle", _updateSingle);
    _defineProperty(this, "_updateParallel", _updateParallel);
    _defineProperty(this, "_updateMany", _updateMany);
    _defineProperty(this, "upsert", upsert);
    _defineProperty(this, "destroy", destroy);
    _defineProperty(this, "_destroySingle", _destroySingle);
    _defineProperty(this, "_destroyParallel", _destroyParallel);
    _defineProperty(this, "_destroyMany", _destroyMany);
    _defineProperty(this, "delete", destroy);
    _defineProperty(this, "del", destroy);
    _defineProperty(this, "cache", new Cache());
    _defineProperty(this, "describe", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'NOCACHE'
    }));
    _defineProperty(this, "describe$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'HIT'
    }));
    _defineProperty(this, "describe$$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'IMMEDIATE'
    }));
    _defineProperty(this, "describeSObject", this.describe);
    _defineProperty(this, "describeSObject$", this.describe$);
    _defineProperty(this, "describeSObject$$", this.describe$$);
    _defineProperty(this, "describeGlobal", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'NOCACHE'
    }));
    _defineProperty(this, "describeGlobal$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'HIT'
    }));
    _defineProperty(this, "describeGlobal$$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'IMMEDIATE'
    }));
    _defineProperty(this, "sobject", sobject);
    _defineProperty(this, "sobjects", {});
    this._conn = conn;
  }

  /**
   * @private
   */
  _establish() {
    this.sobjects = {};
    this.cache.clear();
    this.cache.get('describeGlobal').removeAllListeners('value');
    this.cache.get('describeGlobal').on('value', res => {
      if (res.result) {
        for (const {
          name: type
        } of res.result.sobjects) {
          this.sobject(type);
        }
      }
    });
  }

  /**
   * @private
   */
  _baseUrl() {
    return this._conn._baseUrl() + '/tooling';
  }

  /**
   * @private
   */
  _supports(feature) {
    return this._conn._supports(feature);
  }

  /**
   *
   */
  request(request, options) {
    return this._conn.request(request, options);
  }

  /**
   * Executes Apex code anonymously
   */
  executeAnonymous(body) {
    const url = this._baseUrl() + '/executeAnonymous?anonymousBody=' + encodeURIComponent(body);
    return this.request(url);
  }

  /**
   * Executes Apex tests asynchronously
   */
  runTestsAsynchronous(req) {
    const url = this._baseUrl() + '/runTestsAsynchronous/';
    return this._conn.requestPost(url, req);
  }

  /**
   * Executes Apex tests synchronously
   */
  runTestsSynchronous(req) {
    const url = this._baseUrl() + '/runTestsSynchronous/';
    return this._conn.requestPost(url, req);
  }

  /**
   * Retrieves available code completions of the referenced type
   */
  completions(type = 'apex') {
    const url = this._baseUrl() + '/completions?type=' + encodeURIComponent(type);
    return this.request({
      method: 'GET',
      url,
      headers: {
        Accept: 'application/json'
      }
    });
  }
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('tooling', conn => new Tooling(conn));
export default Tooling;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWdpc3Rlck1vZHVsZSIsIkNvbm5lY3Rpb24iLCJDYWNoZSIsInF1ZXJ5IiwicXVlcnlNb3JlIiwiY3JlYXRlIiwiX2NyZWF0ZVNpbmdsZSIsIl9jcmVhdGVNYW55IiwiX2NyZWF0ZVBhcmFsbGVsIiwicmV0cmlldmUiLCJfcmV0cmlldmVTaW5nbGUiLCJfcmV0cmlldmVQYXJhbGxlbCIsIl9yZXRyaWV2ZU1hbnkiLCJ1cGRhdGUiLCJfdXBkYXRlU2luZ2xlIiwiX3VwZGF0ZVBhcmFsbGVsIiwiX3VwZGF0ZU1hbnkiLCJ1cHNlcnQiLCJkZXN0cm95IiwiX2Rlc3Ryb3lTaW5nbGUiLCJfZGVzdHJveVBhcmFsbGVsIiwiX2Rlc3Ryb3lNYW55IiwiZGVzY3JpYmUiLCJkZXNjcmliZUdsb2JhbCIsInNvYmplY3QiLCJwcm90b3R5cGUiLCJkZXNjcmliZUNhY2hlS2V5IiwidHlwZSIsIlRvb2xpbmciLCJjb25zdHJ1Y3RvciIsImNvbm4iLCJfZGVmaW5lUHJvcGVydHkiLCJjYWNoZSIsImNyZWF0ZUNhY2hlZEZ1bmN0aW9uIiwia2V5Iiwic3RyYXRlZ3kiLCJkZXNjcmliZSQiLCJkZXNjcmliZSQkIiwiX2Nvbm4iLCJfZXN0YWJsaXNoIiwic29iamVjdHMiLCJjbGVhciIsImdldCIsInJlbW92ZUFsbExpc3RlbmVycyIsIm9uIiwicmVzIiwicmVzdWx0IiwibmFtZSIsIl9iYXNlVXJsIiwiX3N1cHBvcnRzIiwiZmVhdHVyZSIsInJlcXVlc3QiLCJvcHRpb25zIiwiZXhlY3V0ZUFub255bW91cyIsImJvZHkiLCJ1cmwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJydW5UZXN0c0FzeW5jaHJvbm91cyIsInJlcSIsInJlcXVlc3RQb3N0IiwicnVuVGVzdHNTeW5jaHJvbm91cyIsImNvbXBsZXRpb25zIiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvdG9vbGluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE1hbmFnZXMgVG9vbGluZyBBUElzXG4gKiBAYXV0aG9yIFNoaW5pY2hpIFRvbWl0YSA8c2hpbmljaGkudG9taXRhQGdtYWlsLmNvbT5cbiAqL1xuaW1wb3J0IHsgcmVnaXN0ZXJNb2R1bGUgfSBmcm9tICcuLi9qc2ZvcmNlJztcbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4uL2Nvbm5lY3Rpb24nO1xuaW1wb3J0IENhY2hlLCB7IENhY2hlZEZ1bmN0aW9uIH0gZnJvbSAnLi4vY2FjaGUnO1xuaW1wb3J0IFNPYmplY3QgZnJvbSAnLi4vc29iamVjdCc7XG5pbXBvcnQge1xuICBEZXNjcmliZUdsb2JhbFJlc3VsdCxcbiAgRGVzY3JpYmVTT2JqZWN0UmVzdWx0LFxuICBIdHRwUmVxdWVzdCxcbiAgU2NoZW1hLFxuICBTT2JqZWN0TmFtZXMsXG59IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBFeGVjdXRlQW5vbnltb3VzUmVzdWx0ID0ge1xuICBjb21waWxlZDogYm9vbGVhbjtcbiAgY29tcGlsZVByb2JsZW06IHN0cmluZyB8IG51bGw7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIGxpbmU6IG51bWJlcjtcbiAgY29sdW1uOiBudW1iZXI7XG4gIGV4Y2VwdGlvbk1lc3NhZ2U6IHN0cmluZyB8IG51bGw7XG4gIGV4Y2VwdGlvblN0YWNrVHJhY2U6IHN0cmluZyB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBSdW5UZXN0TGV2ZWwgPVxuICB8ICdSdW5TcGVjaWZpZWRUZXN0cydcbiAgfCAnUnVuTG9jYWxUZXN0cydcbiAgfCAnUnVuQWxsVGVzdHNJbk9yZyc7XG5cbnR5cGUgVGVzdHNOb2RlID1cbiAgfCB7XG4gICAgICBjbGFzc0lkOiBzdHJpbmc7XG4gICAgICB0ZXN0TWV0aG9kcz86IHN0cmluZ1tdO1xuICAgIH1cbiAgfCB7XG4gICAgICBjbGFzc05hbWU6IHN0cmluZztcbiAgICAgIHRlc3RNZXRob2RzPzogc3RyaW5nW107XG4gICAgfTtcblxuZXhwb3J0IHR5cGUgUnVuVGVzdHNSZXF1ZXN0ID0ge1xuICB0ZXN0czogVGVzdHNOb2RlW107XG4gIG1heEZhaWxlZFRlc3RzPzogbnVtYmVyO1xuICB0ZXN0TGV2ZWw/OiBSdW5UZXN0TGV2ZWw7XG4gIHNraXBDb2RlQ292ZXJhZ2U/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgUnVuVGVzdHNBc3luY1JlcXVlc3QgPVxuICB8IHtcbiAgICAgIGNsYXNzaWRzPzogc3RyaW5nO1xuICAgICAgY2xhc3NOYW1lcz86IHN0cmluZztcbiAgICAgIHN1aXRlaWRzPzogc3RyaW5nO1xuICAgICAgc3VpdGVOYW1lcz86IHN0cmluZztcbiAgICAgIG1heEZhaWxlZFRlc3RzPzogbnVtYmVyO1xuICAgICAgdGVzdExldmVsPzogUnVuVGVzdExldmVsO1xuICAgICAgc2tpcENvZGVDb3ZlcmFnZT86IGJvb2xlYW47XG4gICAgfVxuICB8IHtcbiAgICAgIHRlc3RzOiBUZXN0c05vZGVbXTtcbiAgICAgIG1heEZhaWxlZFRlc3RzPzogbnVtYmVyO1xuICAgICAgdGVzdExldmVsPzogUnVuVGVzdExldmVsO1xuICAgICAgc2tpcENvZGVDb3ZlcmFnZT86IGJvb2xlYW47XG4gICAgfTtcblxudHlwZSBDb2RlQ292ZXJhZ2VSZXN1bHQgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIGxvY2F0aW9uc05vdENvdmVyZWQ6IGFueVtdO1xuICBuYW1lOiBzdHJpbmc7XG4gIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVsbDtcbiAgbnVtTG9jYXRpb25zOiBudW1iZXI7XG4gIG51bUxvY2F0aW9uc05vdENvdmVyZWQ6IG51bWJlcjtcbiAgdHlwZTogc3RyaW5nO1xufTtcblxudHlwZSBDb2RlQ292ZXJhZ2VXYXJuaW5nID0ge1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZyB8IG51bGw7XG4gIG5hbWVzcGFjZTogc3RyaW5nIHwgbnVsbDtcbn07XG5cbnR5cGUgRmxvd0NvdmVyYWdlUmVzdWx0ID0ge1xuICBlbGVtZW50c05vdENvdmVyZWQ6IHN0cmluZ1tdO1xuICBmbG93SWQ6IHN0cmluZztcbiAgZmxvd05hbWU6IHN0cmluZztcbiAgZmxvd05hbWVzcGFjZTogc3RyaW5nIHwgbnVsbDtcbiAgbnVtRWxlbWVudHM6IG51bWJlcjtcbiAgbnVtRWxlbWVudHNOb3RDb3ZlcmVkOiBudW1iZXI7XG4gIHByb2Nlc3NUeXBlOiBzdHJpbmc7XG59O1xuXG50eXBlIEZsb3dDb3ZlcmFnZVdhcm5pbmcgPSB7XG4gIGZsb3dJZDogc3RyaW5nO1xuICBmbG93TmFtZTogc3RyaW5nO1xuICBmbG93TmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59O1xuXG50eXBlIFJ1blRlc3RTdWNjZXNzID0ge1xuICBpZDogc3RyaW5nO1xuICBtZXRob2ROYW1lOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgbmFtZXNwYWNlOiBzdHJpbmcgfCBudWxsO1xuICBzZWVBbGxEYXRhOiBib29sZWFuO1xuICB0aW1lOiBudW1iZXI7XG59O1xuXG50eXBlIFJ1blRlc3RGYWlsdXJlID0ge1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIG1ldGhvZE5hbWU6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBuYW1lc3BhY2U6IHN0cmluZyB8IG51bGw7XG4gIHNlZUFsbERhdGE6IGJvb2xlYW47XG4gIHN0YWNrVHJhY2U6IHN0cmluZztcbiAgdGltZTogbnVtYmVyO1xuICB0eXBlOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBSdW5UZXN0c1Jlc3VsdCA9IHtcbiAgYXBleExvZ0lkOiBzdHJpbmc7XG4gIGNvZGVDb3ZlcmFnZTogQ29kZUNvdmVyYWdlUmVzdWx0W107XG4gIGNvZGVDb3ZlcmFnZVdhcm5pbmdzOiBDb2RlQ292ZXJhZ2VXYXJuaW5nW107XG4gIGZsb3dDb3ZlcmFnZTogRmxvd0NvdmVyYWdlUmVzdWx0W107XG4gIGZsb3dDb3ZlcmFnZVdhcm5pbmdzOiBGbG93Q292ZXJhZ2VXYXJuaW5nW107XG4gIG51bUZhaWx1cmVzOiBudW1iZXI7XG4gIG51bVRlc3RzUnVuOiBudW1iZXI7XG4gIHN1Y2Nlc3NlczogUnVuVGVzdFN1Y2Nlc3NbXTtcbiAgZmFpbHVyZXM6IFJ1blRlc3RGYWlsdXJlW107XG4gIHRvdGFsVGltZTogbnVtYmVyO1xufTtcblxudHlwZSBDb25zdHJ1Y3RvckRlY2xhcmF0aW9uID0ge1xuICBtZXRob2REb2M6IHN0cmluZyB8IG51bGw7XG4gIG5hbWU6IHN0cmluZztcbiAgcGFyYW1ldGVyczogQXJyYXk8e1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gIH0+O1xuICByZWZlcmVuY2VzOiBhbnlbXTtcbn07XG5cbnR5cGUgTWV0aG9kRGVjbGFyYXRpb24gPSB7XG4gIGFyZ1R5cGVzOiBzdHJpbmdbXTtcbiAgaXNTdGF0aWM6IGJvb2xlYW47XG4gIG1ldGhvZERvYzogc3RyaW5nIHwgbnVsbDtcbiAgbmFtZTogc3RyaW5nO1xuICBwYXJhbWV0ZXJzOiBBcnJheTx7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgfT47XG4gIHJlZmVyZW5jZXM6IGFueVtdO1xufTtcblxudHlwZSBQcm9wZXJ0eURlY2xhcmF0aW9uID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHJlZmVyZW5jZXM6IGFueVtdO1xufTtcblxudHlwZSBDbGFzc0RlY2xhcmF0aW9uID0ge1xuICBjb25zdHJ1Y3RvcnM6IENvbnN0cnVjdG9yRGVjbGFyYXRpb25bXTtcbiAgbWV0aG9kczogTWV0aG9kRGVjbGFyYXRpb25bXTtcbiAgcHJvcGVydGllczogUHJvcGVydHlEZWNsYXJhdGlvbltdO1xufTtcblxuZXhwb3J0IHR5cGUgQ29tcGxldGlvbnNSZXN1bHQgPSB7XG4gIHB1YmxpY0RlY2xhcmF0aW9ucz86IHtcbiAgICBbbmFtZXNwYWNlOiBzdHJpbmddOiB7XG4gICAgICBbbmFtZTogc3RyaW5nXTogQ2xhc3NEZWNsYXJhdGlvbjtcbiAgICB9O1xuICB9O1xufTtcblxuLyoqXG4gKlxuICovXG5jb25zdCB7XG4gIHF1ZXJ5LFxuICBxdWVyeU1vcmUsXG4gIGNyZWF0ZSxcbiAgX2NyZWF0ZVNpbmdsZSxcbiAgX2NyZWF0ZU1hbnksXG4gIF9jcmVhdGVQYXJhbGxlbCxcbiAgcmV0cmlldmUsXG4gIF9yZXRyaWV2ZVNpbmdsZSxcbiAgX3JldHJpZXZlUGFyYWxsZWwsXG4gIF9yZXRyaWV2ZU1hbnksXG4gIHVwZGF0ZSxcbiAgX3VwZGF0ZVNpbmdsZSxcbiAgX3VwZGF0ZVBhcmFsbGVsLFxuICBfdXBkYXRlTWFueSxcbiAgdXBzZXJ0LFxuICBkZXN0cm95LFxuICBfZGVzdHJveVNpbmdsZSxcbiAgX2Rlc3Ryb3lQYXJhbGxlbCxcbiAgX2Rlc3Ryb3lNYW55LFxuICBkZXNjcmliZSxcbiAgZGVzY3JpYmVHbG9iYWwsXG4gIHNvYmplY3QsXG59ID0gQ29ubmVjdGlvbi5wcm90b3R5cGU7XG5cbmNvbnN0IGRlc2NyaWJlQ2FjaGVLZXkgPSAodHlwZT86IHN0cmluZykgPT5cbiAgdHlwZSA/IGBkZXNjcmliZS4ke3R5cGV9YCA6ICdkZXNjcmliZSc7XG5cbi8qKlxuICogQVBJIGNsYXNzIGZvciBUb29saW5nIEFQSSBjYWxsXG4gKi9cbmV4cG9ydCBjbGFzcyBUb29saW5nPFMgZXh0ZW5kcyBTY2hlbWE+IHtcbiAgX2Nvbm46IENvbm5lY3Rpb248Uz47XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcXVlcnkgYnkgdXNpbmcgU09RTFxuICAgKi9cbiAgcXVlcnk6IENvbm5lY3Rpb248Uz5bJ3F1ZXJ5J10gPSBxdWVyeTtcblxuICAvKipcbiAgICogUXVlcnkgbmV4dCByZWNvcmQgc2V0IGJ5IHVzaW5nIHF1ZXJ5IGxvY2F0b3JcbiAgICovXG4gIHF1ZXJ5TW9yZTogQ29ubmVjdGlvbjxTPlsncXVlcnlNb3JlJ10gPSBxdWVyeU1vcmU7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSByZWNvcmRzXG4gICAqL1xuICBjcmVhdGU6IENvbm5lY3Rpb248Uz5bJ2NyZWF0ZSddID0gY3JlYXRlO1xuICBfY3JlYXRlU2luZ2xlID0gX2NyZWF0ZVNpbmdsZTtcbiAgX2NyZWF0ZVBhcmFsbGVsID0gX2NyZWF0ZVBhcmFsbGVsO1xuICBfY3JlYXRlTWFueSA9IF9jcmVhdGVNYW55O1xuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFRvb2xpbmcjY3JlYXRlKClcbiAgICovXG4gIGluc2VydCA9IGNyZWF0ZTtcblxuICAvKipcbiAgICogUmV0cmlldmUgc3BlY2lmaWVkIHJlY29yZHNcbiAgICovXG4gIHJldHJpZXZlOiBDb25uZWN0aW9uPFM+WydyZXRyaWV2ZSddID0gcmV0cmlldmU7XG4gIF9yZXRyaWV2ZVNpbmdsZSA9IF9yZXRyaWV2ZVNpbmdsZTtcbiAgX3JldHJpZXZlUGFyYWxsZWwgPSBfcmV0cmlldmVQYXJhbGxlbDtcbiAgX3JldHJpZXZlTWFueSA9IF9yZXRyaWV2ZU1hbnk7XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSByZWNvcmRzXG4gICAqL1xuICB1cGRhdGU6IENvbm5lY3Rpb248Uz5bJ3VwZGF0ZSddID0gdXBkYXRlO1xuICBfdXBkYXRlU2luZ2xlID0gX3VwZGF0ZVNpbmdsZTtcbiAgX3VwZGF0ZVBhcmFsbGVsID0gX3VwZGF0ZVBhcmFsbGVsO1xuICBfdXBkYXRlTWFueSA9IF91cGRhdGVNYW55O1xuXG4gIC8qKlxuICAgKiBVcHNlcnQgcmVjb3Jkc1xuICAgKi9cbiAgdXBzZXJ0OiBDb25uZWN0aW9uPFM+Wyd1cHNlcnQnXSA9IHVwc2VydDtcblxuICAvKipcbiAgICogRGVsZXRlIHJlY29yZHNcbiAgICovXG4gIGRlc3Ryb3k6IENvbm5lY3Rpb248Uz5bJ2Rlc3Ryb3knXSA9IGRlc3Ryb3k7XG4gIF9kZXN0cm95U2luZ2xlID0gX2Rlc3Ryb3lTaW5nbGU7XG4gIF9kZXN0cm95UGFyYWxsZWwgPSBfZGVzdHJveVBhcmFsbGVsO1xuICBfZGVzdHJveU1hbnkgPSBfZGVzdHJveU1hbnk7XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgVG9vbGluZyNkZXN0cm95KClcbiAgICovXG4gIGRlbGV0ZSA9IGRlc3Ryb3k7XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgVG9vbGluZyNkZXN0cm95KClcbiAgICovXG4gIGRlbCA9IGRlc3Ryb3k7XG5cbiAgY2FjaGUgPSBuZXcgQ2FjaGUoKTtcblxuICAvKipcbiAgICogRGVzY3JpYmUgU09iamVjdCBtZXRhZGF0YVxuICAgKi9cbiAgZGVzY3JpYmUgPSB0aGlzLmNhY2hlLmNyZWF0ZUNhY2hlZEZ1bmN0aW9uKGRlc2NyaWJlLCB0aGlzLCB7XG4gICAga2V5OiBkZXNjcmliZUNhY2hlS2V5LFxuICAgIHN0cmF0ZWd5OiAnTk9DQUNIRScsXG4gIH0pO1xuICBkZXNjcmliZSQgPSB0aGlzLmNhY2hlLmNyZWF0ZUNhY2hlZEZ1bmN0aW9uKGRlc2NyaWJlLCB0aGlzLCB7XG4gICAga2V5OiBkZXNjcmliZUNhY2hlS2V5LFxuICAgIHN0cmF0ZWd5OiAnSElUJyxcbiAgfSk7XG4gIGRlc2NyaWJlJCQgPSAodGhpcy5jYWNoZS5jcmVhdGVDYWNoZWRGdW5jdGlvbihkZXNjcmliZSwgdGhpcywge1xuICAgIGtleTogZGVzY3JpYmVDYWNoZUtleSxcbiAgICBzdHJhdGVneTogJ0lNTUVESUFURScsXG4gIH0pIGFzIHVua25vd24pIGFzIENhY2hlZEZ1bmN0aW9uPChuYW1lOiBzdHJpbmcpID0+IERlc2NyaWJlU09iamVjdFJlc3VsdD47XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgVG9vbGluZyNkZXNjcmliZSgpXG4gICAqL1xuICBkZXNjcmliZVNPYmplY3QgPSB0aGlzLmRlc2NyaWJlO1xuICBkZXNjcmliZVNPYmplY3QkID0gdGhpcy5kZXNjcmliZSQ7XG4gIGRlc2NyaWJlU09iamVjdCQkID0gdGhpcy5kZXNjcmliZSQkO1xuXG4gIC8qKlxuICAgKiBEZXNjcmliZSBnbG9iYWwgU09iamVjdHNcbiAgICovXG4gIGRlc2NyaWJlR2xvYmFsID0gdGhpcy5jYWNoZS5jcmVhdGVDYWNoZWRGdW5jdGlvbihkZXNjcmliZUdsb2JhbCwgdGhpcywge1xuICAgIGtleTogJ2Rlc2NyaWJlR2xvYmFsJyxcbiAgICBzdHJhdGVneTogJ05PQ0FDSEUnLFxuICB9KTtcbiAgZGVzY3JpYmVHbG9iYWwkID0gdGhpcy5jYWNoZS5jcmVhdGVDYWNoZWRGdW5jdGlvbihkZXNjcmliZUdsb2JhbCwgdGhpcywge1xuICAgIGtleTogJ2Rlc2NyaWJlR2xvYmFsJyxcbiAgICBzdHJhdGVneTogJ0hJVCcsXG4gIH0pO1xuICBkZXNjcmliZUdsb2JhbCQkID0gKHRoaXMuY2FjaGUuY3JlYXRlQ2FjaGVkRnVuY3Rpb24oZGVzY3JpYmVHbG9iYWwsIHRoaXMsIHtcbiAgICBrZXk6ICdkZXNjcmliZUdsb2JhbCcsXG4gICAgc3RyYXRlZ3k6ICdJTU1FRElBVEUnLFxuICB9KSBhcyB1bmtub3duKSBhcyBDYWNoZWRGdW5jdGlvbjwobmFtZTogc3RyaW5nKSA9PiBEZXNjcmliZUdsb2JhbFJlc3VsdD47XG5cbiAgLyoqXG4gICAqIEdldCBTT2JqZWN0IGluc3RhbmNlXG4gICAqL1xuICBzb2JqZWN0OiBDb25uZWN0aW9uPFM+Wydzb2JqZWN0J10gPSBzb2JqZWN0O1xuXG4gIHNvYmplY3RzOiB7IFtOIGluIFNPYmplY3ROYW1lczxTPl0/OiBTT2JqZWN0PFMsIE4+IH0gPSB7fTtcblxuICAvKipcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbm46IENvbm5lY3Rpb248Uz4pIHtcbiAgICB0aGlzLl9jb25uID0gY29ubjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2VzdGFibGlzaCgpIHtcbiAgICB0aGlzLnNvYmplY3RzID0ge307XG4gICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICAgIHRoaXMuY2FjaGUuZ2V0KCdkZXNjcmliZUdsb2JhbCcpLnJlbW92ZUFsbExpc3RlbmVycygndmFsdWUnKTtcbiAgICB0aGlzLmNhY2hlLmdldCgnZGVzY3JpYmVHbG9iYWwnKS5vbigndmFsdWUnLCAocmVzKSA9PiB7XG4gICAgICBpZiAocmVzLnJlc3VsdCkge1xuICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZTogdHlwZSB9IG9mIHJlcy5yZXN1bHQuc29iamVjdHMpIHtcbiAgICAgICAgICB0aGlzLnNvYmplY3QodHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2Jhc2VVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm4uX2Jhc2VVcmwoKSArICcvdG9vbGluZyc7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zdXBwb3J0cyhmZWF0dXJlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5fc3VwcG9ydHMoZmVhdHVyZSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHJlcXVlc3Q8UiA9IHVua25vd24+KHJlcXVlc3Q6IHN0cmluZyB8IEh0dHBSZXF1ZXN0LCBvcHRpb25zPzogT2JqZWN0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm4ucmVxdWVzdDxSPihyZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBBcGV4IGNvZGUgYW5vbnltb3VzbHlcbiAgICovXG4gIGV4ZWN1dGVBbm9ueW1vdXMoYm9keTogc3RyaW5nKSB7XG4gICAgY29uc3QgdXJsID1cbiAgICAgIHRoaXMuX2Jhc2VVcmwoKSArXG4gICAgICAnL2V4ZWN1dGVBbm9ueW1vdXM/YW5vbnltb3VzQm9keT0nICtcbiAgICAgIGVuY29kZVVSSUNvbXBvbmVudChib2R5KTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PEV4ZWN1dGVBbm9ueW1vdXNSZXN1bHQ+KHVybCk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgQXBleCB0ZXN0cyBhc3luY2hyb25vdXNseVxuICAgKi9cbiAgcnVuVGVzdHNBc3luY2hyb25vdXMocmVxOiBSdW5UZXN0c0FzeW5jUmVxdWVzdCkge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuX2Jhc2VVcmwoKSArICcvcnVuVGVzdHNBc3luY2hyb25vdXMvJztcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0UG9zdDxzdHJpbmcgfCBudWxsPih1cmwsIHJlcSk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZXMgQXBleCB0ZXN0cyBzeW5jaHJvbm91c2x5XG4gICAqL1xuICBydW5UZXN0c1N5bmNocm9ub3VzKHJlcTogUnVuVGVzdHNSZXF1ZXN0KSB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5fYmFzZVVybCgpICsgJy9ydW5UZXN0c1N5bmNocm9ub3VzLyc7XG4gICAgcmV0dXJuIHRoaXMuX2Nvbm4ucmVxdWVzdFBvc3Q8UnVuVGVzdHNSZXN1bHQgfCBudWxsPih1cmwsIHJlcSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGF2YWlsYWJsZSBjb2RlIGNvbXBsZXRpb25zIG9mIHRoZSByZWZlcmVuY2VkIHR5cGVcbiAgICovXG4gIGNvbXBsZXRpb25zKHR5cGU6ICdhcGV4JyB8ICd2aXN1YWxmb3JjZScgPSAnYXBleCcpIHtcbiAgICBjb25zdCB1cmwgPVxuICAgICAgdGhpcy5fYmFzZVVybCgpICsgJy9jb21wbGV0aW9ucz90eXBlPScgKyBlbmNvZGVVUklDb21wb25lbnQodHlwZSk7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxDb21wbGV0aW9uc1Jlc3VsdD4oe1xuICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgIHVybCxcbiAgICAgIGhlYWRlcnM6IHsgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8qXG4gKiBSZWdpc3RlciBob29rIGluIGNvbm5lY3Rpb24gaW5zdGFudGlhdGlvbiBmb3IgZHluYW1pY2FsbHkgYWRkaW5nIHRoaXMgQVBJIG1vZHVsZSBmZWF0dXJlc1xuICovXG5yZWdpc3Rlck1vZHVsZSgndG9vbGluZycsIChjb25uKSA9PiBuZXcgVG9vbGluZyhjb25uKSk7XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2xpbmc7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxjQUFjLFFBQVEsWUFBWTtBQUMzQyxPQUFPQyxVQUFVLE1BQU0sZUFBZTtBQUN0QyxPQUFPQyxLQUFLLE1BQTBCLFVBQVU7O0FBVWhEO0FBQ0E7QUFDQTs7QUErSkE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtFQUNKQyxLQUFLO0VBQ0xDLFNBQVM7RUFDVEMsTUFBTTtFQUNOQyxhQUFhO0VBQ2JDLFdBQVc7RUFDWEMsZUFBZTtFQUNmQyxRQUFRO0VBQ1JDLGVBQWU7RUFDZkMsaUJBQWlCO0VBQ2pCQyxhQUFhO0VBQ2JDLE1BQU07RUFDTkMsYUFBYTtFQUNiQyxlQUFlO0VBQ2ZDLFdBQVc7RUFDWEMsTUFBTTtFQUNOQyxPQUFPO0VBQ1BDLGNBQWM7RUFDZEMsZ0JBQWdCO0VBQ2hCQyxZQUFZO0VBQ1pDLFFBQVE7RUFDUkMsY0FBYztFQUNkQztBQUNGLENBQUMsR0FBR3ZCLFVBQVUsQ0FBQ3dCLFNBQVM7QUFFeEIsTUFBTUMsZ0JBQWdCLEdBQUlDLElBQWEsSUFDckNBLElBQUksR0FBSSxZQUFXQSxJQUFLLEVBQUMsR0FBRyxVQUFVOztBQUV4QztBQUNBO0FBQ0E7QUFDQSxPQUFPLE1BQU1DLE9BQU8sQ0FBbUI7RUFHckM7QUFDRjtBQUNBOztFQUdFO0FBQ0Y7QUFDQTs7RUFHRTtBQUNGO0FBQ0E7O0VBTUU7QUFDRjtBQUNBOztFQUdFO0FBQ0Y7QUFDQTs7RUFNRTtBQUNGO0FBQ0E7O0VBTUU7QUFDRjtBQUNBOztFQUdFO0FBQ0Y7QUFDQTs7RUFNRTtBQUNGO0FBQ0E7O0VBR0U7QUFDRjtBQUNBOztFQUtFO0FBQ0Y7QUFDQTs7RUFjRTtBQUNGO0FBQ0E7O0VBS0U7QUFDRjtBQUNBOztFQWNFO0FBQ0Y7QUFDQTs7RUFLRTtBQUNGO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBQ0MsSUFBbUIs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