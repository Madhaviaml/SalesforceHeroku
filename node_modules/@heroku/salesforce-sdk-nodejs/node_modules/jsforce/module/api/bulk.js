import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.promise";
import "core-js/modules/es.string.replace";
import _WeakMap from "@babel/runtime-corejs3/core-js-stable/weak-map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _classPrivateFieldGet from "@babel/runtime-corejs3/helpers/classPrivateFieldGet";
import _classPrivateFieldSet from "@babel/runtime-corejs3/helpers/classPrivateFieldSet";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _trimInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/trim";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source), true)).call(_context5, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source))).call(_context6, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Manages Salesforce Bulk API related operations
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { Writable } from 'stream';
import joinStreams from 'multistream';
import { Serializable, Parsable } from '../record-stream';
import HttpApi from '../http-api';
import { registerModule } from '../jsforce';
import { concatStreamsAsDuplex } from '../util/stream';
import { isFunction, isObject } from '../util/function';

/*--------------------------------------------*/

/**
 * Class for Bulk API Job
 */
export class Job extends EventEmitter {
  /**
   *
   */
  constructor(bulk, type, operation, options, jobId) {
    super();
    _defineProperty(this, "type", void 0);
    _defineProperty(this, "operation", void 0);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "state", void 0);
    _defineProperty(this, "_bulk", void 0);
    _defineProperty(this, "_batches", void 0);
    _defineProperty(this, "_jobInfo", void 0);
    _defineProperty(this, "_error", void 0);
    this._bulk = bulk;
    this.type = type;
    this.operation = operation;
    this.options = options || {};
    this.id = jobId !== null && jobId !== void 0 ? jobId : null;
    this.state = this.id ? 'Open' : 'Unknown';
    this._batches = {};
    // default error handler to keep the latest error
    this.on('error', error => this._error = error);
  }

  /**
   * Return latest jobInfo from cache
   */
  info() {
    // if cache is not available, check the latest
    if (!this._jobInfo) {
      this._jobInfo = this.check();
    }
    return this._jobInfo;
  }

  /**
   * Open new job and get jobinfo
   */
  open() {
    const bulk = this._bulk;
    const options = this.options;

    // if sobject type / operation is not provided
    if (!this.type || !this.operation) {
      throw new Error('type / operation is required to open a new job');
    }

    // if not requested opening job
    if (!this._jobInfo) {
      var _context;
      let operation = this.operation.toLowerCase();
      if (operation === 'harddelete') {
        operation = 'hardDelete';
      }
      if (operation === 'queryall') {
        operation = 'queryAll';
      }
      const body = _trimInstanceProperty(_context = `
<?xml version="1.0" encoding="UTF-8"?>
<jobInfo  xmlns="http://www.force.com/2009/06/asyncapi/dataload">
  <operation>${operation}</operation>
  <object>${this.type}</object>
  ${options.extIdField ? `<externalIdFieldName>${options.extIdField}</externalIdFieldName>` : ''}
  ${options.concurrencyMode ? `<concurrencyMode>${options.concurrencyMode}</concurrencyMode>` : ''}
  ${options.assignmentRuleId ? `<assignmentRuleId>${options.assignmentRuleId}</assignmentRuleId>` : ''}
  <contentType>CSV</contentType>
</jobInfo>
      `).call(_context);
      this._jobInfo = (async () => {
        try {
          const res = await bulk._request({
            method: 'POST',
            path: '/job',
            body,
            headers: {
              'Content-Type': 'application/xml; charset=utf-8'
            },
            responseType: 'application/xml'
          });
          this.emit('open', res.jobInfo);
          this.id = res.jobInfo.id;
          this.state = res.jobInfo.state;
          return res.jobInfo;
        } catch (err) {
          this.emit('error', err);
          throw err;
        }
      })();
    }
    return this._jobInfo;
  }

  /**
   * Create a new batch instance in the job
   */
  createBatch() {
    const batch = new Batch(this);
    batch.on('queue', () => {
      this._batches[batch.id] = batch;
    });
    return batch;
  }

  /**
   * Get a batch instance specified by given batch ID
   */
  batch(batchId) {
    let batch = this._batches[batchId];
    if (!batch) {
      batch = new Batch(this, batchId);
      this._batches[batchId] = batch;
    }
    return batch;
  }

  /**
   * Check the latest job status from server
   */
  check() {
    const bulk = this._bulk;
    const logger = bulk._logger;
    this._jobInfo = (async () => {
      const jobId = await this.ready();
      const res = await bulk._request({
        method: 'GET',
        path: '/job/' + jobId,
        responseType: 'application/xml'
      });
      logger.debug(res.jobInfo);
      this.id = res.jobInfo.id;
      this.type = res.jobInfo.object;
      this.operation = res.jobInfo.operation;
      this.state = res.jobInfo.state;
      return res.jobInfo;
    })();
    return this._jobInfo;
  }

  /**
   * Wait till the job is assigned to server
   */
  ready() {
    return this.id ? _Promise.resolve(this.id) : this.open().then(({
      id
    }) => id);
  }

  /**
   * List all registered batch info in job
   */
  async list() {
    const bulk = this._bulk;
    const logger = bulk._logger;
    const jobId = await this.ready();
    const res = await bulk._request({
      method: 'GET',
      path: '/job/' + jobId + '/batch',
      responseType: 'application/xml'
    });
    logger.debug(res.batchInfoList.batchInfo);
    const batchInfoList = _Array$isArray(res.batchInfoList.batchInfo) ? res.batchInfoList.batchInfo : [res.batchInfoList.batchInfo];
    return batchInfoList;
  }

  /**
   * Close opened job
   */
  async close() {
    if (!this.id) {
      return;
    }
    try {
      const jobInfo = await this._changeState('Closed');
      this.id = null;
      this.emit('close', jobInfo);
      return jobInfo;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Set the status to abort
   */
  async abort() {
    if (!this.id) {
      return;
    }
    try {
      const jobInfo = await this._changeState('Aborted');
      this.id = null;
      this.emit('abort', jobInfo);
      return jobInfo;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * @private
   */
  async _changeState(state) {
    const bulk = this._bulk;
    const logger = bulk._logger;
    this._jobInfo = (async () => {
      var _context2;
      const jobId = await this.ready();
      const body = _trimInstanceProperty(_context2 = ` 
<?xml version="1.0" encoding="UTF-8"?>
  <jobInfo xmlns="http://www.force.com/2009/06/asyncapi/dataload">
  <state>${state}</state>
</jobInfo>
      `).call(_context2);
      const res = await bulk._request({
        method: 'POST',
        path: '/job/' + jobId,
        body: body,
        headers: {
          'Content-Type': 'application/xml; charset=utf-8'
        },
        responseType: 'application/xml'
      });
      logger.debug(res.jobInfo);
      this.state = res.jobInfo.state;
      return res.jobInfo;
    })();
    return this._jobInfo;
  }
}

/*--------------------------------------------*/
class PollingTimeoutError extends Error {
  /**
   *
   */
  constructor(message, jobId, batchId) {
    super(message);
    _defineProperty(this, "jobId", void 0);
    _defineProperty(this, "batchId", void 0);
    this.name = 'PollingTimeout';
    this.jobId = jobId;
    this.batchId = batchId;
  }
}
class JobPollingTimeoutError extends Error {
  /**
   *
   */
  constructor(message, jobId) {
    super(message);
    _defineProperty(this, "jobId", void 0);
    this.name = 'JobPollingTimeout';
    this.jobId = jobId;
  }
}

/*--------------------------------------------*/
/**
 * Batch (extends Writable)
 */
export class Batch extends Writable {
  /**
   *
   */
  constructor(job, id) {
    super({
      objectMode: true
    });
    _defineProperty(this, "job", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "_bulk", void 0);
    _defineProperty(this, "_uploadStream", void 0);
    _defineProperty(this, "_downloadStream", void 0);
    _defineProperty(this, "_dataStream", void 0);
    _defineProperty(this, "_result", void 0);
    _defineProperty(this, "_error", void 0);
    _defineProperty(this, "run", this.execute);
    _defineProperty(this, "exec", this.execute);
    this.job = job;
    this.id = id;
    this._bulk = job._bulk;

    // default error handler to keep the latest error
    this.on('error', error => this._error = error);

    //
    // setup data streams
    //
    const converterOptions = {
      nullValue: '#N/A'
    };
    const uploadStream = this._uploadStream = new Serializable();
    const uploadDataStream = uploadStream.stream('csv', converterOptions);
    const downloadStream = this._downloadStream = new Parsable();
    const downloadDataStream = downloadStream.stream('csv', converterOptions);
    this.on('finish', () => uploadStream.end());
    uploadDataStream.once('readable', async () => {
      try {
        // ensure the job is opened in server or job id is already assigned
        await this.job.ready();
        // pipe upload data to batch API request stream
        uploadDataStream.pipe(this._createRequestStream());
      } catch (err) {
        this.emit('error', err);
      }
    });

    // duplex data stream, opened access to API programmers by Batch#stream()
    this._dataStream = concatStreamsAsDuplex(uploadDataStream, downloadDataStream);
  }

  /**
   * Connect batch API and create stream instance of request/response
   *
   * @private
   */
  _createRequestStream() {
    const bulk = this._bulk;
    const logger = bulk._logger;
    const req = bulk._request({
      method: 'POST',
      path: '/job/' + this.job.id + '/batch',
      headers: {
        'Content-Type': 'text/csv'
      },
      responseType: 'application/xml'
    });
    (async () => {
      try {
        const res = await req;
        logger.debug(res.batchInfo);
        this.id = res.batchInfo.id;
        this.emit('queue', res.batchInfo);
      } catch (err) {
        this.emit('error', err);
      }
    })();
    return req.stream();
  }

  /**
   * Implementation of Writable
   */
  _write(record_, enc, cb) {
    const {
        Id,
        type,
        attributes
      } = record_,
      rrec = _objectWithoutProperties(record_, ["Id", "type", "attributes"]);
    let record;
    switch (this.job.operation) {
      case 'insert':
        record = rrec;
        break;
      case 'delete':
      case 'hardDelete':
        record = {
          Id
        };
        break;
      default:
        record = _objectSpread({
          Id
        }, rrec);
    }
    this._uploadStream.write(record, enc, cb);
  }

  /**
   * Returns duplex stream which accepts CSV data input and batch result output
   */
  stream() {
    return this._dataStream;
  }

  /**
   * Execute batch operation
   */
  execute(input) {
    // if batch is already executed
    if (this._result) {
      throw new Error('Batch already executed.');
    }
    this._result = new _Promise((resolve, reject) => {
      this.once('response', resolve);
      this.once('error', reject);
    });
    if (isObject(input) && 'pipe' in input && isFunction(input.pipe)) {
      // if input has stream.Readable interface
      input.pipe(this._dataStream);
    } else {
      if (_Array$isArray(input)) {
        for (const record of input) {
          for (const key of _Object$keys(record)) {
            if (typeof record[key] === 'boolean') {
              record[key] = String(record[key]);
            }
          }
          this.write(record);
        }
        this.end();
      } else if (typeof input === 'string') {
        this._dataStream.write(input, 'utf8');
        this._dataStream.end();
      }
    }

    // return Batch instance for chaining
    return this;
  }
  /**
   * Promise/A+ interface
   * Delegate to promise, return promise instance for batch result
   */
  then(onResolved, onReject) {
    if (!this._result) {
      this.execute();
    }
    return this._result.then(onResolved, onReject);
  }

  /**
   * Check the latest batch status in server
   */
  async check() {
    const bulk = this._bulk;
    const logger = bulk._logger;
    const jobId = this.job.id;
    const batchId = this.id;
    if (!jobId || !batchId) {
      throw new Error('Batch not started.');
    }
    const res = await bulk._request({
      method: 'GET',
      path: '/job/' + jobId + '/batch/' + batchId,
      responseType: 'application/xml'
    });
    logger.debug(res.batchInfo);
    return res.batchInfo;
  }

  /**
   * Polling the batch result and retrieve
   */
  poll(interval, timeout) {
    const jobId = this.job.id;
    const batchId = this.id;
    if (!jobId || !batchId) {
      throw new Error('Batch not started.');
    }
    const startTime = new Date().getTime();
    const poll = async () => {
      const now = new Date().getTime();
      if (startTime + timeout < now) {
        const err = new PollingTimeoutError('Polling time out. Job Id = ' + jobId + ' , batch Id = ' + batchId, jobId, batchId);
        this.emit('error', err);
        return;
      }
      let res;
      try {
        res = await this.check();
      } catch (err) {
        this.emit('error', err);
        return;
      }
      if (res.state === 'Failed') {
        if (_parseInt(res.numberRecordsProcessed, 10) > 0) {
          this.retrieve();
        } else {
          this.emit('error', new Error(res.stateMessage));
        }
      } else if (res.state === 'Completed') {
        this.retrieve();
      } else {
        this.emit('progress', res);
        _setTimeout(poll, interval);
      }
    };
    _setTimeout(poll, interval);
  }

  /**
   * Retrieve batch result
   */
  async retrieve() {
    const bulk = this._bulk;
    const jobId = this.job.id;
    const job = this.job;
    const batchId = this.id;
    if (!jobId || !batchId) {
      throw new Error('Batch not started.');
    }
    try {
      const resp = await bulk._request({
        method: 'GET',
        path: '/job/' + jobId + '/batch/' + batchId + '/result'
      });
      let results;
      if (job.operation === 'query' || job.operation === 'queryAll') {
        var _context3;
        const res = resp;
        let resultId = res['result-list'].result;
        results = _mapInstanceProperty(_context3 = _Array$isArray(resultId) ? resultId : [resultId]).call(_context3, id => ({
          id,
          batchId,
          jobId
        }));
      } else {
        const res = resp;
        results = _mapInstanceProperty(res).call(res, ret => ({
          id: ret.Id || null,
          success: ret.Success === 'true',
          errors: ret.Error ? [ret.Error] : []
        }));
      }
      this.emit('response', results);
      return results;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Fetch query result as a record stream
   * @param {String} resultId - Result id
   * @returns {RecordStream} - Record stream, convertible to CSV data stream
   */
  result(resultId) {
    const jobId = this.job.id;
    const batchId = this.id;
    if (!jobId || !batchId) {
      throw new Error('Batch not started.');
    }
    const resultStream = new Parsable();
    const resultDataStream = resultStream.stream('csv');
    this._bulk._request({
      method: 'GET',
      path: '/job/' + jobId + '/batch/' + batchId + '/result/' + resultId,
      responseType: 'application/octet-stream'
    }).stream().pipe(resultDataStream);
    return resultStream;
  }
}

/*--------------------------------------------*/
/**
 *
 */
class BulkApi extends HttpApi {
  beforeSend(request) {
    var _this$_conn$accessTok;
    request.headers = _objectSpread(_objectSpread({}, request.headers), {}, {
      'X-SFDC-SESSION': (_this$_conn$accessTok = this._conn.accessToken) !== null && _this$_conn$accessTok !== void 0 ? _this$_conn$accessTok : ''
    });
  }
  isSessionExpired(response) {
    return response.statusCode === 400 && /<exceptionCode>InvalidSessionId<\/exceptionCode>/.test(response.body);
  }
  hasErrorInResponseBody(body) {
    return !!body.error;
  }
  parseError(body) {
    return {
      errorCode: body.error.exceptionCode,
      message: body.error.exceptionMessage
    };
  }
}
class BulkApiV2 extends HttpApi {
  hasErrorInResponseBody(body) {
    return _Array$isArray(body) && typeof body[0] === 'object' && 'errorCode' in body[0];
  }
  isSessionExpired(response) {
    return response.statusCode === 401 && /INVALID_SESSION_ID/.test(response.body);
  }
  parseError(body) {
    return {
      errorCode: body[0].errorCode,
      message: body[0].message
    };
  }
}

/*--------------------------------------------*/

/**
 * Class for Bulk API
 *
 * @class
 */
export class Bulk {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   * @type {Number}
   */

  /**
   *
   */
  constructor(conn) {
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "_logger", void 0);
    _defineProperty(this, "pollInterval", 1000);
    _defineProperty(this, "pollTimeout", 10000);
    this._conn = conn;
    this._logger = conn._logger;
  }

  /**
   *
   */
  _request(request_) {
    const conn = this._conn;
    const {
        path,
        responseType
      } = request_,
      rreq = _objectWithoutProperties(request_, ["path", "responseType"]);
    const baseUrl = [conn.instanceUrl, 'services/async', conn.version].join('/');
    const request = _objectSpread(_objectSpread({}, rreq), {}, {
      url: baseUrl + path
    });
    return new BulkApi(this._conn, {
      responseType
    }).request(request);
  }

  /**
   * Create and start bulkload job and batch
   */

  load(type, operation, optionsOrInput, input) {
    let options = {};
    if (typeof optionsOrInput === 'string' || _Array$isArray(optionsOrInput) || isObject(optionsOrInput) && 'pipe' in optionsOrInput && typeof optionsOrInput.pipe === 'function') {
      // when options is not plain hash object, it is omitted
      input = optionsOrInput;
    } else {
      options = optionsOrInput;
    }
    const job = this.createJob(type, operation, options);
    const batch = job.createBatch();
    const cleanup = () => job.close();
    const cleanupOnError = err => {
      if (err.name !== 'PollingTimeout') {
        cleanup();
      }
    };
    batch.on('response', cleanup);
    batch.on('error', cleanupOnError);
    batch.on('queue', () => {
      batch === null || batch === void 0 ? void 0 : batch.poll(this.pollInterval, this.pollTimeout);
    });
    return batch.execute(input);
  }

  /**
   * Execute bulk query and get record stream
   */
  query(soql) {
    const m = soql.replace(/\([\s\S]+\)/g, '').match(/FROM\s+(\w+)/i);
    if (!m) {
      throw new Error('No sobject type found in query, maybe caused by invalid SOQL.');
    }
    const type = m[1];
    const recordStream = new Parsable();
    const dataStream = recordStream.stream('csv');
    (async () => {
      try {
        const results = await this.load(type, 'query', soql);
        const streams = _mapInstanceProperty(results).call(results, result => this.job(result.jobId).batch(result.batchId).result(result.id).stream());
        joinStreams(streams).pipe(dataStream);
      } catch (err) {
        recordStream.emit('error', err);
      }
    })();
    return recordStream;
  }

  /**
   * Create a new job instance
   */
  createJob(type, operation, options = {}) {
    return new Job(this, type, operation, options);
  }

  /**
   * Get a job instance specified by given job ID
   *
   * @param {String} jobId - Job ID
   * @returns {Bulk~Job}
   */
  job(jobId) {
    return new Job(this, null, null, null, jobId);
  }
}
var _connection = new _WeakMap();
export class BulkV2 {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   * @type {Number}
   */

  constructor(connection) {
    _connection.set(this, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "pollInterval", 1000);
    _defineProperty(this, "pollTimeout", 10000);
    _classPrivateFieldSet(this, _connection, connection);
  }

  /**
   * Create a new job instance
   */
  createJob(options) {
    return new IngestJobV2({
      connection: _classPrivateFieldGet(this, _connection),
      jobInfo: options,
      pollingOptions: this
    });
  }
  job(options) {
    return new IngestJobV2({
      connection: _classPrivateFieldGet(this, _connection),
      jobInfo: options,
      pollingOptions: this
    });
  }

  /**
   * Create, upload, and start bulkload job
   */
  async loadAndWaitForResults(options) {
    const job = this.createJob(options);
    try {
      await job.open();
      await job.uploadData(options.input);
      await job.close();
      await job.poll(options.pollInterval, options.pollTimeout);
      return await job.getAllResults();
    } catch (err) {
      if (err.name !== 'JobPollingTimeoutError') {
        // fires off one last attempt to clean up and ignores the result | error
        job.delete().catch(ignored => ignored);
      }
      throw err;
    }
  }

  /**
   * Execute bulk query and get record stream
   */
  async query(soql, options) {
    const queryJob = new QueryJobV2({
      connection: _classPrivateFieldGet(this, _connection),
      operation: 'query',
      query: soql,
      pollingOptions: this
    });
    try {
      await queryJob.open();
      await queryJob.poll(options === null || options === void 0 ? void 0 : options.pollInterval, options === null || options === void 0 ? void 0 : options.pollTimeout);
      return await queryJob.getResults();
    } catch (err) {
      if (err.name !== 'JobPollingTimeoutError') {
        // fires off one last attempt to clean up and ignores the result | error
        queryJob.delete().catch(ignored => ignored);
      }
      throw err;
    }
  }
}
var _connection2 = new _WeakMap();
var _operation = new _WeakMap();
var _query = new _WeakMap();
var _pollingOptions = new _WeakMap();
var _queryResults = new _WeakMap();
var _error = new _WeakMap();
export class QueryJobV2 extends EventEmitter {
  constructor(options) {
    super();
    _connection2.set(this, {
      writable: true,
      value: void 0
    });
    _operation.set(this, {
      writable: true,
      value: void 0
    });
    _query.set(this, {
      writable: true,
      value: void 0
    });
    _pollingOptions.set(this, {
      writable: true,
      value: void 0
    });
    _queryResults.set(this, {
      writable: true,
      value: void 0
    });
    _error.set(this, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "jobInfo", void 0);
    _defineProperty(this, "locator", void 0);
    _defineProperty(this, "finished", false);
    _classPrivateFieldSet(this, _connection2, options.connection);
    _classPrivateFieldSet(this, _operation, options.operation);
    _classPrivateFieldSet(this, _query, options.query);
    _classPrivateFieldSet(this, _pollingOptions, options.pollingOptions);
    // default error handler to keep the latest error
    this.on('error', error => _classPrivateFieldSet(this, _error, error));
  }
  async open() {
    try {
      this.jobInfo = await this.createQueryRequest({
        method: 'POST',
        path: '',
        body: _JSON$stringify({
          operation: _classPrivateFieldGet(this, _operation),
          query: _classPrivateFieldGet(this, _query)
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('open');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Set the status to abort
   */
  async abort() {
    try {
      var _this$jobInfo;
      const state = 'Aborted';
      this.jobInfo = await this.createQueryRequest({
        method: 'PATCH',
        path: `/${(_this$jobInfo = this.jobInfo) === null || _this$jobInfo === void 0 ? void 0 : _this$jobInfo.id}`,
        body: _JSON$stringify({
          state
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('aborted');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }
  async poll(interval = _classPrivateFieldGet(this, _pollingOptions).pollInterval, timeout = _classPrivateFieldGet(this, _pollingOptions).pollTimeout) {
    const jobId = getJobIdOrError(this.jobInfo);
    const startTime = _Date$now();
    while (startTime + timeout > _Date$now()) {
      try {
        const res = await this.check();
        switch (res.state) {
          case 'Open':
            throw new Error('Job has not been started');
          case 'Aborted':
            throw new Error('Job has been aborted');
          case 'UploadComplete':
          case 'InProgress':
            await delay(interval);
            break;
          case 'Failed':
            this.emit('failed');
            return;
          case 'JobComplete':
            this.emit('jobcomplete');
            return;
        }
      } catch (err) {
        this.emit('error', err);
        throw err;
      }
    }
    const timeoutError = new JobPollingTimeoutError(`Polling time out. Job Id = ${jobId}`, jobId);
    this.emit('error', timeoutError);
    throw timeoutError;
  }

  /**
   * Check the latest batch status in server
   */
  async check() {
    try {
      const jobInfo = await this.createQueryRequest({
        method: 'GET',
        path: `/${getJobIdOrError(this.jobInfo)}`,
        responseType: 'application/json'
      });
      this.jobInfo = jobInfo;
      return jobInfo;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }
  request(request, options = {}) {
    // if request is simple string, regard it as url in GET method
    let request_ = typeof request === 'string' ? {
      method: 'GET',
      url: request
    } : request;
    const httpApi = new HttpApi(_classPrivateFieldGet(this, _connection2), options);
    httpApi.on('response', response => {
      this.locator = response.headers['sforce-locator'];
    });
    return httpApi.request(request_);
  }
  getResultsUrl() {
    const url = `${_classPrivateFieldGet(this, _connection2).instanceUrl}/services/data/v${_classPrivateFieldGet(this, _connection2).version}/jobs/query/${getJobIdOrError(this.jobInfo)}/results`;
    return this.locator ? `${url}?locator=${this.locator}` : url;
  }
  async getResults() {
    if (this.finished && _classPrivateFieldGet(this, _queryResults)) {
      return _classPrivateFieldGet(this, _queryResults);
    }
    _classPrivateFieldSet(this, _queryResults, []);
    while (this.locator !== 'null') {
      var _context4;
      const nextResults = await this.request({
        method: 'GET',
        url: this.getResultsUrl(),
        headers: {
          Accept: 'text/csv'
        }
      });
      _classPrivateFieldSet(this, _queryResults, _concatInstanceProperty(_context4 = _classPrivateFieldGet(this, _queryResults)).call(_context4, nextResults));
    }
    this.finished = true;
    return _classPrivateFieldGet(this, _queryResults);
  }
  async delete() {
    return this.createQueryRequest({
      method: 'DELETE',
      path: `/${getJobIdOrError(this.jobInfo)}`
    });
  }
  createQueryRequest(request) {
    const {
      path,
      responseType
    } = request;
    const baseUrl = [_classPrivateFieldGet(this, _connection2).instanceUrl, 'services/data', `v${_classPrivateFieldGet(this, _connection2).version}`, 'jobs/query'].join('/');
    return new BulkApiV2(_classPrivateFieldGet(this, _connection2), {
      responseType
    }).request(_objectSpread(_objectSpread({}, request), {}, {
      url: baseUrl + path
    }));
  }
}

/**
 * Class for Bulk API V2 Ingest Job
 */
var _connection3 = new _WeakMap();
var _pollingOptions2 = new _WeakMap();
var _jobData = new _WeakMap();
var _bulkJobSuccessfulResults = new _WeakMap();
var _bulkJobFailedResults = new _WeakMap();
var _bulkJobUnprocessedRecords = new _WeakMap();
var _error2 = new _WeakMap();
export class IngestJobV2 extends EventEmitter {
  /**
   *
   */
  constructor(options) {
    super();
    _connection3.set(this, {
      writable: true,
      value: void 0
    });
    _pollingOptions2.set(this, {
      writable: true,
      value: void 0
    });
    _jobData.set(this, {
      writable: true,
      value: void 0
    });
    _bulkJobSuccessfulResults.set(this, {
      writable: true,
      value: void 0
    });
    _bulkJobFailedResults.set(this, {
      writable: true,
      value: void 0
    });
    _bulkJobUnprocessedRecords.set(this, {
      writable: true,
      value: void 0
    });
    _error2.set(this, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "jobInfo", void 0);
    _classPrivateFieldSet(this, _connection3, options.connection);
    _classPrivateFieldSet(this, _pollingOptions2, options.pollingOptions);
    this.jobInfo = options.jobInfo;
    _classPrivateFieldSet(this, _jobData, new JobDataV2({
      createRequest: request => this.createIngestRequest(request),
      job: this
    }));
    // default error handler to keep the latest error
    this.on('error', error => _classPrivateFieldSet(this, _error2, error));
  }
  get id() {
    return this.jobInfo.id;
  }
  async open() {
    try {
      var _this$jobInfo2, _this$jobInfo3, _this$jobInfo4, _this$jobInfo5, _this$jobInfo6;
      this.jobInfo = await this.createIngestRequest({
        method: 'POST',
        path: '',
        body: _JSON$stringify({
          assignmentRuleId: (_this$jobInfo2 = this.jobInfo) === null || _this$jobInfo2 === void 0 ? void 0 : _this$jobInfo2.assignmentRuleId,
          externalIdFieldName: (_this$jobInfo3 = this.jobInfo) === null || _this$jobInfo3 === void 0 ? void 0 : _this$jobInfo3.externalIdFieldName,
          object: (_this$jobInfo4 = this.jobInfo) === null || _this$jobInfo4 === void 0 ? void 0 : _this$jobInfo4.object,
          operation: (_this$jobInfo5 = this.jobInfo) === null || _this$jobInfo5 === void 0 ? void 0 : _this$jobInfo5.operation,
          lineEnding: (_this$jobInfo6 = this.jobInfo) === null || _this$jobInfo6 === void 0 ? void 0 : _this$jobInfo6.lineEnding
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('open');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }
  async uploadData(input) {
    await _classPrivateFieldGet(this, _jobData).execute(input);
  }
  async getAllResults() {
    const [successfulResults, failedResults, unprocessedRecords] = await _Promise.all([this.getSuccessfulResults(), this.getFailedResults(), this.getUnprocessedRecords()]);
    return {
      successfulResults,
      failedResults,
      unprocessedRecords
    };
  }

  /**
   * Close opened job
   */
  async close() {
    try {
      const state = 'UploadComplete';
      this.jobInfo = await this.createIngestRequest({
        method: 'PATCH',
        path: `/${this.jobInfo.id}`,
        body: _JSON$stringify({
          state
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('uploadcomplete');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }

  /**
   * Set the status to abort
   */
  async abort() {
    try {
      const state = 'Aborted';
      this.jobInfo = await this.createIngestRequest({
        method: 'PATCH',
        path: `/${this.jobInfo.id}`,
        body: _JSON$stringify({
          state
        }),
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        },
        responseType: 'application/json'
      });
      this.emit('aborted');
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }
  async poll(interval = _classPrivateFieldGet(this, _pollingOptions2).pollInterval, timeout = _classPrivateFieldGet(this, _pollingOptions2).pollTimeout) {
    const jobId = getJobIdOrError(this.jobInfo);
    const startTime = _Date$now();
    while (startTime + timeout > _Date$now()) {
      try {
        const res = await this.check();
        switch (res.state) {
          case 'Open':
            throw new Error('Job has not been started');
          case 'Aborted':
            throw new Error('Job has been aborted');
          case 'UploadComplete':
          case 'InProgress':
            await delay(interval);
            break;
          case 'Failed':
            this.emit('failed');
            return;
          case 'JobComplete':
            this.emit('jobcomplete');
            return;
        }
      } catch (err) {
        this.emit('error', err);
        throw err;
      }
    }
    const timeoutError = new JobPollingTimeoutError(`Polling time out. Job Id = ${jobId}`, jobId);
    this.emit('error', timeoutError);
    throw timeoutError;
  }

  /**
   * Check the latest batch status in server
   */
  async check() {
    try {
      const jobInfo = await this.createIngestRequest({
        method: 'GET',
        path: `/${getJobIdOrError(this.jobInfo)}`,
        responseType: 'application/json'
      });
      this.jobInfo = jobInfo;
      return jobInfo;
    } catch (err) {
      this.emit('error', err);
      throw err;
    }
  }
  async getSuccessfulResults() {
    if (_classPrivateFieldGet(this, _bulkJobSuccessfulResults)) {
      return _classPrivateFieldGet(this, _bulkJobSuccessfulResults);
    }
    const results = await this.createIngestRequest({
      method: 'GET',
      path: `/${getJobIdOrError(this.jobInfo)}/successfulResults`,
      responseType: 'text/csv'
    });
    _classPrivateFieldSet(this, _bulkJobSuccessfulResults, results !== null && results !== void 0 ? results : []);
    return _classPrivateFieldGet(this, _bulkJobSuccessfulResults);
  }
  async getFailedResults() {
    if (_classPrivateFieldGet(this, _bulkJobFailedResults)) {
      return _classPrivateFieldGet(this, _bulkJobFailedResults);
    }
    const results = await this.createIngestRequest({
      method: 'GET',
      path: `/${getJobIdOrError(this.jobInfo)}/failedResults`,
      responseType: 'text/csv'
    });
    _classPrivateFieldSet(this, _bulkJobFailedResults, results !== null && results !== void 0 ? results : []);
    return _classPrivateFieldGet(this, _bulkJobFailedResults);
  }
  async getUnprocessedRecords() {
    if (_classPrivateFieldGet(this, _bulkJobUnprocessedRecords)) {
      return _classPrivateFieldGet(this, _bulkJobUnprocessedRecords);
    }
    const results = await this.createIngestRequest({
      method: 'GET',
      path: `/${getJobIdOrError(this.jobInfo)}/unprocessedrecords`,
      responseType: 'text/csv'
    });
    _classPrivateFieldSet(this, _bulkJobUnprocessedRecords, results !== null && results !== void 0 ? results : []);
    return _classPrivateFieldGet(this, _bulkJobUnprocessedRecords);
  }
  async delete() {
    return this.createIngestRequest({
      method: 'DELETE',
      path: `/${getJobIdOrError(this.jobInfo)}`
    });
  }
  createIngestRequest(request) {
    const {
      path,
      responseType
    } = request;
    const baseUrl = [_classPrivateFieldGet(this, _connection3).instanceUrl, 'services/data', `v${_classPrivateFieldGet(this, _connection3).version}`, 'jobs/ingest'].join('/');
    return new BulkApiV2(_classPrivateFieldGet(this, _connection3), {
      responseType
    }).request(_objectSpread(_objectSpread({}, request), {}, {
      url: baseUrl + path
    }));
  }
}
var _job = new _WeakMap();
var _uploadStream = new _WeakMap();
var _downloadStream = new _WeakMap();
var _dataStream = new _WeakMap();
var _result = new _WeakMap();
class JobDataV2 extends Writable {
  /**
   *
   */
  constructor(options) {
    super({
      objectMode: true
    });
    _job.set(this, {
      writable: true,
      value: void 0
    });
    _uploadStream.set(this, {
      writable: true,
      value: void 0
    });
    _downloadStream.set(this, {
      writable: true,
      value: void 0
    });
    _dataStream.set(this, {
      writable: true,
      value: void 0
    });
    _result.set(this, {
      writable: true,
      value: void 0
    });
    const createRequest = options.createRequest;
    _classPrivateFieldSet(this, _job, options.job);
    _classPrivateFieldSet(this, _uploadStream, new Serializable());
    _classPrivateFieldSet(this, _downloadStream, new Parsable());
    const converterOptions = {
      nullValue: '#N/A'
    };
    const uploadDataStream = _classPrivateFieldGet(this, _uploadStream).stream('csv', converterOptions);
    const downloadDataStream = _classPrivateFieldGet(this, _downloadStream).stream('csv', converterOptions);
    _classPrivateFieldSet(this, _dataStream, concatStreamsAsDuplex(uploadDataStream, downloadDataStream));
    this.on('finish', () => _classPrivateFieldGet(this, _uploadStream).end());
    uploadDataStream.once('readable', () => {
      try {
        var _classPrivateFieldGet2;
        // pipe upload data to batch API request stream
        const req = createRequest({
          method: 'PUT',
          path: `/${(_classPrivateFieldGet2 = _classPrivateFieldGet(this, _job).jobInfo) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.id}/batches`,
          headers: {
            'Content-Type': 'text/csv'
          },
          responseType: 'application/json'
        });
        (async () => {
          try {
            const res = await req;
            this.emit('response', res);
          } catch (err) {
            this.emit('error', err);
          }
        })();
        uploadDataStream.pipe(req.stream());
      } catch (err) {
        this.emit('error', err);
      }
    });
  }
  _write(record_, enc, cb) {
    const {
        Id,
        type,
        attributes
      } = record_,
      rrec = _objectWithoutProperties(record_, ["Id", "type", "attributes"]);
    let record;
    switch (_classPrivateFieldGet(this, _job).jobInfo.operation) {
      case 'insert':
        record = rrec;
        break;
      case 'delete':
      case 'hardDelete':
        record = {
          Id
        };
        break;
      default:
        record = _objectSpread({
          Id
        }, rrec);
    }
    _classPrivateFieldGet(this, _uploadStream).write(record, enc, cb);
  }

  /**
   * Returns duplex stream which accepts CSV data input and batch result output
   */
  stream() {
    return _classPrivateFieldGet(this, _dataStream);
  }

  /**
   * Execute batch operation
   */
  execute(input) {
    if (_classPrivateFieldGet(this, _result)) {
      throw new Error('Data can only be uploaded to a job once.');
    }
    _classPrivateFieldSet(this, _result, new _Promise((resolve, reject) => {
      this.once('response', () => resolve());
      this.once('error', reject);
    }));
    if (isObject(input) && 'pipe' in input && isFunction(input.pipe)) {
      // if input has stream.Readable interface
      input.pipe(_classPrivateFieldGet(this, _dataStream));
    } else {
      if (_Array$isArray(input)) {
        for (const record of input) {
          for (const key of _Object$keys(record)) {
            if (typeof record[key] === 'boolean') {
              record[key] = String(record[key]);
            }
          }
          this.write(record);
        }
        this.end();
      } else if (typeof input === 'string') {
        _classPrivateFieldGet(this, _dataStream).write(input, 'utf8');
        _classPrivateFieldGet(this, _dataStream).end();
      }
    }
    return this;
  }

  /**
   * Promise/A+ interface
   * Delegate to promise, return promise instance for batch result
   */
  then(onResolved, onReject) {
    if (_classPrivateFieldGet(this, _result) === undefined) {
      this.execute();
    }
    return _classPrivateFieldGet(this, _result).then(onResolved, onReject);
  }
}
function getJobIdOrError(jobInfo) {
  const jobId = jobInfo === null || jobInfo === void 0 ? void 0 : jobInfo.id;
  if (jobId === undefined) {
    throw new Error('No job id, maybe you need to call `job.open()` first.');
  }
  return jobId;
}
function delay(ms) {
  return new _Promise(resolve => _setTimeout(resolve, ms));
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('bulk', conn => new Bulk(conn));
registerModule('bulk2', conn => new BulkV2(conn));
export default Bulk;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,