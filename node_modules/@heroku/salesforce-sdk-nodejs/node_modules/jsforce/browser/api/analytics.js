import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import "core-js/modules/es.array.join";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * @file Manages Salesforce Analytics API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { registerModule } from '../jsforce';
import { ReportMetadata, ReportExecuteResult, ReportRetrieveResult, ReportDescribeResult, ReportInfo, ReportInstanceInfo, DashboardMetadata, DashboardResult, DashboardStatusResult, DashboardRefreshResult, DashboardInfo } from './analytics/types';
/*----------------------------------------------------------------------------------*/
export { ReportMetadata, ReportExecuteResult, ReportRetrieveResult, ReportDescribeResult, ReportInfo, ReportInstanceInfo, DashboardMetadata, DashboardResult, DashboardStatusResult, DashboardRefreshResult, DashboardInfo };
/*----------------------------------------------------------------------------------*/
/**
 * Report object class in Analytics API
 */
export var ReportInstance = /*#__PURE__*/function () {
  /**
   *
   */
  function ReportInstance(report, id) {
    _classCallCheck(this, ReportInstance);
    _defineProperty(this, "_report", void 0);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    this._report = report;
    this._conn = report._conn;
    this.id = id;
  }

  /**
   * Retrieve report result asynchronously executed
   */
  _createClass(ReportInstance, [{
    key: "retrieve",
    value: function retrieve() {
      var url = [this._conn._baseUrl(), 'analytics', 'reports', this._report.id, 'instances', this.id].join('/');
      return this._conn.request(url);
    }
  }]);
  return ReportInstance;
}();

/*----------------------------------------------------------------------------------*/
/**
 * Report object class in Analytics API
 */
export var Report = /*#__PURE__*/function () {
  /**
   *
   */
  function Report(conn, id) {
    _classCallCheck(this, Report);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "delete", this.destroy);
    _defineProperty(this, "del", this.destroy);
    _defineProperty(this, "run", this.execute);
    _defineProperty(this, "exec", this.execute);
    this._conn = conn;
    this.id = id;
  }

  /**
   * Describe report metadata
   */
  _createClass(Report, [{
    key: "describe",
    value: function describe() {
      var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'describe'].join('/');
      return this._conn.request(url);
    }
    /**
     * Destroy a report
     */
  }, {
    key: "destroy",
    value: function destroy() {
      var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/');
      return this._conn.request({
        method: 'DELETE',
        url: url
      });
    }
    /**
     * Synonym of Analytics~Report#destroy()
     */
    /**
     * Synonym of Analytics~Report#destroy()
     */
  }, {
    key: "clone",
    /**
     * Clones a given report
     */
    value: function clone(name) {
      var url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/') + '?cloneId=' + this.id;
      var config = {
        reportMetadata: {
          name: name
        }
      };
      return this._conn.request({
        method: 'POST',
        url: url,
        headers: {
          'Content-Type': 'application/json'
        },
        body: _JSON$stringify(config)
      });
    }
    /**
     * Explain plan for executing report
     */
  }, {
    key: "explain",
    value: function explain() {
      var url = '/query/?explain=' + this.id;
      return this._conn.request(url);
    }
    /**
     * Run report synchronously
     */
  }, {
    key: "execute",
    value: function execute() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id].join('/') + '?includeDetails=' + (options.details ? 'true' : 'false');
      return this._conn.request(_objectSpread({
        url: url
      }, options.metadata ? {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: _JSON$stringify(options.metadata)
      } : {
        method: 'GET'
      }));
    }
    /**
     * Synonym of Analytics~Report#execute()
     */
    /**
     * Synonym of Analytics~Report#execute()
     */
  }, {
    key: "executeAsync",
    /**
     * Run report asynchronously
     */
    value: function executeAsync() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/') + (options.details ? '?includeDetails=true' : '');
      return this._conn.request(_objectSpread({
        method: 'POST',
        url: url
      }, options.metadata ? {
        headers: {
          'Content-Type': 'application/json'
        },
        body: _JSON$stringify(options.metadata)
      } : {
        body: ''
      }));
    }
    /**
     * Get report instance for specified instance ID
     */
  }, {
    key: "instance",
    value: function instance(id) {
      return new ReportInstance(this, id);
    }
    /**
     * List report instances which had been executed asynchronously
     */
  }, {
    key: "instances",
    value: function instances() {
      var url = [this._conn._baseUrl(), 'analytics', 'reports', this.id, 'instances'].join('/');
      return this._conn.request(url);
    }
  }]);
  return Report;
}();

/*----------------------------------------------------------------------------------*/
/**
 * Dashboard object class in the Analytics API
 */
export var Dashboard = /*#__PURE__*/function () {
  /**
   *
   */
  function Dashboard(conn, id) {
    _classCallCheck(this, Dashboard);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "id", void 0);
    _defineProperty(this, "delete", this.destroy);
    _defineProperty(this, "del", this.destroy);
    this._conn = conn;
    this.id = id;
  }

  /**
   * Describe dashboard metadata
   *
   * @method Analytics~Dashboard#describe
   * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function
   * @returns {Promise.<Analytics-DashboardMetadata>}
   */
  _createClass(Dashboard, [{
    key: "describe",
    value: function describe() {
      var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'describe'].join('/');
      return this._conn.request(url);
    }
    /**
     * Get details about dashboard components
     */
  }, {
    key: "components",
    value: function components(componentIds) {
      var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
      var config = {
        componentIds: _Array$isArray(componentIds) ? componentIds : typeof componentIds === 'string' ? [componentIds] : undefined
      };
      return this._conn.request({
        method: 'POST',
        url: url,
        headers: {
          'Content-Type': 'application/json'
        },
        body: _JSON$stringify(config)
      });
    }
    /**
     * Get dashboard status
     */
  }, {
    key: "status",
    value: function status() {
      var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id, 'status'].join('/');
      return this._conn.request(url);
    }
    /**
     * Refresh a dashboard
     */
  }, {
    key: "refresh",
    value: function refresh() {
      var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
      return this._conn.request({
        method: 'PUT',
        url: url,
        body: ''
      });
    }
    /**
     * Clone a dashboard
     */
  }, {
    key: "clone",
    value: function clone(config, folderId) {
      var url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/') + '?cloneId=' + this.id;
      if (typeof config === 'string') {
        config = {
          name: config,
          folderId: folderId
        };
      }
      return this._conn.request({
        method: 'POST',
        url: url,
        headers: {
          'Content-Type': 'application/json'
        },
        body: _JSON$stringify(config)
      });
    }
    /**
     * Destroy a dashboard
     */
  }, {
    key: "destroy",
    value: function destroy() {
      var url = [this._conn._baseUrl(), 'analytics', 'dashboards', this.id].join('/');
      return this._conn.request({
        method: 'DELETE',
        url: url
      });
    }
    /**
     * Synonym of Analytics~Dashboard#destroy()
     */
    /**
     * Synonym of Analytics~Dashboard#destroy()
     */
  }]);
  return Dashboard;
}();

/*----------------------------------------------------------------------------------*/
/**
 * API class for Analytics API
 */
export var Analytics = /*#__PURE__*/function () {
  /**
   *
   */
  function Analytics(conn) {
    _classCallCheck(this, Analytics);
    _defineProperty(this, "_conn", void 0);
    this._conn = conn;
  }

  /**
   * Get report object of Analytics API
   */
  _createClass(Analytics, [{
    key: "report",
    value: function report(id) {
      return new Report(this._conn, id);
    }
    /**
     * Get recent report list
     */
  }, {
    key: "reports",
    value: function reports() {
      var url = [this._conn._baseUrl(), 'analytics', 'reports'].join('/');
      return this._conn.request(url);
    }
    /**
     * Get dashboard object of Analytics API
     */
  }, {
    key: "dashboard",
    value: function dashboard(id) {
      return new Dashboard(this._conn, id);
    }
    /**
     * Get recent dashboard list
     */
  }, {
    key: "dashboards",
    value: function dashboards() {
      var url = [this._conn._baseUrl(), 'analytics', 'dashboards'].join('/');
      return this._conn.request(url);
    }
  }]);
  return Analytics;
}();

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('analytics', function (conn) {
  return new Analytics(conn);
});
export default Analytics;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,