import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.array.join";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.promise";
import "core-js/modules/es.regexp.exec";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.string.iterator";
import "core-js/modules/es.string.match";
import "core-js/modules/es.string.replace";
import "core-js/modules/web.dom-collections.iterator";
import _WeakMap from "@babel/runtime-corejs3/core-js-stable/weak-map";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _classPrivateFieldGet from "@babel/runtime-corejs3/helpers/classPrivateFieldGet";
import _classPrivateFieldSet from "@babel/runtime-corejs3/helpers/classPrivateFieldSet";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _Object$keys2 from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _wrapNativeSuper from "@babel/runtime-corejs3/helpers/wrapNativeSuper";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "regenerator-runtime/runtime";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _trimInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/trim";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _assertThisInitialized from "@babel/runtime-corejs3/helpers/assertThisInitialized";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === "undefined" || _getIteratorMethod(o) == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { var _context47; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context47 = Object.prototype.toString.call(o)).call(_context47, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function ownKeys(object, enumerableOnly) { var keys = _Object$keys2(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context45; _forEachInstanceProperty(_context45 = ownKeys(Object(source), true)).call(_context45, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context46; _forEachInstanceProperty(_context46 = ownKeys(Object(source))).call(_context46, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 * @file Manages Salesforce Bulk API related operations
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { Writable } from 'stream';
import joinStreams from 'multistream';
import { Serializable, Parsable } from '../record-stream';
import HttpApi from '../http-api';
import { registerModule } from '../jsforce';
import { concatStreamsAsDuplex } from '../util/stream';
import { isFunction, isObject } from '../util/function';

/*--------------------------------------------*/

/**
 * Class for Bulk API Job
 */
export var Job = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Job, _EventEmitter);
  var _super = _createSuper(Job);
  /**
   *
   */
  function Job(bulk, type, operation, options, jobId) {
    var _this;
    _classCallCheck(this, Job);
    _this = _super.call(this);
    _defineProperty(_assertThisInitialized(_this), "type", void 0);
    _defineProperty(_assertThisInitialized(_this), "operation", void 0);
    _defineProperty(_assertThisInitialized(_this), "options", void 0);
    _defineProperty(_assertThisInitialized(_this), "id", void 0);
    _defineProperty(_assertThisInitialized(_this), "state", void 0);
    _defineProperty(_assertThisInitialized(_this), "_bulk", void 0);
    _defineProperty(_assertThisInitialized(_this), "_batches", void 0);
    _defineProperty(_assertThisInitialized(_this), "_jobInfo", void 0);
    _defineProperty(_assertThisInitialized(_this), "_error", void 0);
    _this._bulk = bulk;
    _this.type = type;
    _this.operation = operation;
    _this.options = options || {};
    _this.id = jobId !== null && jobId !== void 0 ? jobId : null;
    _this.state = _this.id ? 'Open' : 'Unknown';
    _this._batches = {};
    // default error handler to keep the latest error
    _this.on('error', function (error) {
      return _this._error = error;
    });
    return _this;
  }

  /**
   * Return latest jobInfo from cache
   */
  _createClass(Job, [{
    key: "info",
    value: function info() {
      // if cache is not available, check the latest
      if (!this._jobInfo) {
        this._jobInfo = this.check();
      }
      return this._jobInfo;
    }
    /**
     * Open new job and get jobinfo
     */
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;
      var bulk = this._bulk;
      var options = this.options;

      // if sobject type / operation is not provided
      if (!this.type || !this.operation) {
        throw new Error('type / operation is required to open a new job');
      }

      // if not requested opening job
      if (!this._jobInfo) {
        var _context, _context2, _context3, _context4, _context5;
        var _operation = this.operation.toLowerCase();
        if (_operation === 'harddelete') {
          _operation = 'hardDelete';
        }
        if (_operation === 'queryall') {
          _operation = 'queryAll';
        }
        var body = _trimInstanceProperty(_context = _concatInstanceProperty(_context2 = _concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = _concatInstanceProperty(_context5 = "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">\n  <operation>".concat(_operation, "</operation>\n  <object>")).call(_context5, this.type, "</object>\n  ")).call(_context4, options.extIdField ? "<externalIdFieldName>".concat(options.extIdField, "</externalIdFieldName>") : '', "\n  ")).call(_context3, options.concurrencyMode ? "<concurrencyMode>".concat(options.concurrencyMode, "</concurrencyMode>") : '', "\n  ")).call(_context2, options.assignmentRuleId ? "<assignmentRuleId>".concat(options.assignmentRuleId, "</assignmentRuleId>") : '', "\n  <contentType>CSV</contentType>\n</jobInfo>\n      ")).call(_context);
        this._jobInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
          var _res;
          return _regeneratorRuntime.wrap(function _callee$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.prev = 0;
                  _context6.next = 3;
                  return bulk._request({
                    method: 'POST',
                    path: '/job',
                    body: body,
                    headers: {
                      'Content-Type': 'application/xml; charset=utf-8'
                    },
                    responseType: 'application/xml'
                  });
                case 3:
                  _res = _context6.sent;
                  _this2.emit('open', _res.jobInfo);
                  _this2.id = _res.jobInfo.id;
                  _this2.state = _res.jobInfo.state;
                  return _context6.abrupt("return", _res.jobInfo);
                case 10:
                  _context6.prev = 10;
                  _context6.t0 = _context6["catch"](0);
                  _this2.emit('error', _context6.t0);
                  throw _context6.t0;
                case 14:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee, null, [[0, 10]]);
        }))();
      }
      return this._jobInfo;
    }
    /**
     * Create a new batch instance in the job
     */
  }, {
    key: "createBatch",
    value: function createBatch() {
      var _this3 = this;
      var batch = new Batch(this);
      batch.on('queue', function () {
        _this3._batches[batch.id] = batch;
      });
      return batch;
    }
    /**
     * Get a batch instance specified by given batch ID
     */
  }, {
    key: "batch",
    value: function batch(batchId) {
      var batch = this._batches[batchId];
      if (!batch) {
        batch = new Batch(this, batchId);
        this._batches[batchId] = batch;
      }
      return batch;
    }
    /**
     * Check the latest job status from server
     */
  }, {
    key: "check",
    value: function check() {
      var _this4 = this;
      var bulk = this._bulk;
      var logger = bulk._logger;
      this._jobInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var jobId, res;
        return _regeneratorRuntime.wrap(function _callee2$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return _this4.ready();
              case 2:
                jobId = _context7.sent;
                _context7.next = 5;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId,
                  responseType: 'application/xml'
                });
              case 5:
                res = _context7.sent;
                logger.debug(res.jobInfo);
                _this4.id = res.jobInfo.id;
                _this4.type = res.jobInfo.object;
                _this4.operation = res.jobInfo.operation;
                _this4.state = res.jobInfo.state;
                return _context7.abrupt("return", res.jobInfo);
              case 12:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee2);
      }))();
      return this._jobInfo;
    }
    /**
     * Wait till the job is assigned to server
     */
  }, {
    key: "ready",
    value: function ready() {
      return this.id ? _Promise.resolve(this.id) : this.open().then(function (_ref3) {
        var id = _ref3.id;
        return id;
      });
    }
    /**
     * List all registered batch info in job
     */
  }, {
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var bulk, logger, jobId, res, batchInfoList;
        return _regeneratorRuntime.wrap(function _callee3$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                _context8.next = 4;
                return this.ready();
              case 4:
                jobId = _context8.sent;
                _context8.next = 7;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch',
                  responseType: 'application/xml'
                });
              case 7:
                res = _context8.sent;
                logger.debug(res.batchInfoList.batchInfo);
                batchInfoList = _Array$isArray(res.batchInfoList.batchInfo) ? res.batchInfoList.batchInfo : [res.batchInfoList.batchInfo];
                return _context8.abrupt("return", batchInfoList);
              case 11:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee3, this);
      }));
      function list() {
        return _list.apply(this, arguments);
      }
      return list;
    }()
    /**
     * Close opened job
     */
  }, {
    key: "close",
    value: function () {
      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        var jobInfo;
        return _regeneratorRuntime.wrap(function _callee4$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (this.id) {
                  _context9.next = 2;
                  break;
                }
                return _context9.abrupt("return");
              case 2:
                _context9.prev = 2;
                _context9.next = 5;
                return this._changeState('Closed');
              case 5:
                jobInfo = _context9.sent;
                this.id = null;
                this.emit('close', jobInfo);
                return _context9.abrupt("return", jobInfo);
              case 11:
                _context9.prev = 11;
                _context9.t0 = _context9["catch"](2);
                this.emit('error', _context9.t0);
                throw _context9.t0;
              case 15:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee4, this, [[2, 11]]);
      }));
      function close() {
        return _close.apply(this, arguments);
      }
      return close;
    }()
    /**
     * Set the status to abort
     */
  }, {
    key: "abort",
    value: function () {
      var _abort = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var jobInfo;
        return _regeneratorRuntime.wrap(function _callee5$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if (this.id) {
                  _context10.next = 2;
                  break;
                }
                return _context10.abrupt("return");
              case 2:
                _context10.prev = 2;
                _context10.next = 5;
                return this._changeState('Aborted');
              case 5:
                jobInfo = _context10.sent;
                this.id = null;
                this.emit('abort', jobInfo);
                return _context10.abrupt("return", jobInfo);
              case 11:
                _context10.prev = 11;
                _context10.t0 = _context10["catch"](2);
                this.emit('error', _context10.t0);
                throw _context10.t0;
              case 15:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee5, this, [[2, 11]]);
      }));
      function abort() {
        return _abort.apply(this, arguments);
      }
      return abort;
    }()
    /**
     * @private
     */
  }, {
    key: "_changeState",
    value: function () {
      var _changeState2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(state) {
        var _this5 = this;
        var bulk, logger;
        return _regeneratorRuntime.wrap(function _callee7$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                this._jobInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
                  var _context11;
                  var jobId, body, res;
                  return _regeneratorRuntime.wrap(function _callee6$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          _context12.next = 2;
                          return _this5.ready();
                        case 2:
                          jobId = _context12.sent;
                          body = _trimInstanceProperty(_context11 = " \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">\n  <state>".concat(state, "</state>\n</jobInfo>\n      ")).call(_context11);
                          _context12.next = 6;
                          return bulk._request({
                            method: 'POST',
                            path: '/job/' + jobId,
                            body: body,
                            headers: {
                              'Content-Type': 'application/xml; charset=utf-8'
                            },
                            responseType: 'application/xml'
                          });
                        case 6:
                          res = _context12.sent;
                          logger.debug(res.jobInfo);
                          _this5.state = res.jobInfo.state;
                          return _context12.abrupt("return", res.jobInfo);
                        case 10:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee6);
                }))();
                return _context13.abrupt("return", this._jobInfo);
              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee7, this);
      }));
      function _changeState(_x) {
        return _changeState2.apply(this, arguments);
      }
      return _changeState;
    }()
  }]);
  return Job;
}(EventEmitter);

/*--------------------------------------------*/
var PollingTimeoutError = /*#__PURE__*/function (_Error) {
  _inherits(PollingTimeoutError, _Error);
  var _super2 = _createSuper(PollingTimeoutError);
  /**
   *
   */
  function PollingTimeoutError(message, jobId, batchId) {
    var _this6;
    _classCallCheck(this, PollingTimeoutError);
    _this6 = _super2.call(this, message);
    _defineProperty(_assertThisInitialized(_this6), "jobId", void 0);
    _defineProperty(_assertThisInitialized(_this6), "batchId", void 0);
    _this6.name = 'PollingTimeout';
    _this6.jobId = jobId;
    _this6.batchId = batchId;
    return _this6;
  }
  return PollingTimeoutError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
var JobPollingTimeoutError = /*#__PURE__*/function (_Error2) {
  _inherits(JobPollingTimeoutError, _Error2);
  var _super3 = _createSuper(JobPollingTimeoutError);
  /**
   *
   */
  function JobPollingTimeoutError(message, jobId) {
    var _this7;
    _classCallCheck(this, JobPollingTimeoutError);
    _this7 = _super3.call(this, message);
    _defineProperty(_assertThisInitialized(_this7), "jobId", void 0);
    _this7.name = 'JobPollingTimeout';
    _this7.jobId = jobId;
    return _this7;
  }
  return JobPollingTimeoutError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/*--------------------------------------------*/
/**
 * Batch (extends Writable)
 */
export var Batch = /*#__PURE__*/function (_Writable) {
  _inherits(Batch, _Writable);
  var _super4 = _createSuper(Batch);
  /**
   *
   */
  function Batch(job, id) {
    var _this8;
    _classCallCheck(this, Batch);
    _this8 = _super4.call(this, {
      objectMode: true
    });
    _defineProperty(_assertThisInitialized(_this8), "job", void 0);
    _defineProperty(_assertThisInitialized(_this8), "id", void 0);
    _defineProperty(_assertThisInitialized(_this8), "_bulk", void 0);
    _defineProperty(_assertThisInitialized(_this8), "_uploadStream", void 0);
    _defineProperty(_assertThisInitialized(_this8), "_downloadStream", void 0);
    _defineProperty(_assertThisInitialized(_this8), "_dataStream", void 0);
    _defineProperty(_assertThisInitialized(_this8), "_result", void 0);
    _defineProperty(_assertThisInitialized(_this8), "_error", void 0);
    _defineProperty(_assertThisInitialized(_this8), "run", _this8.execute);
    _defineProperty(_assertThisInitialized(_this8), "exec", _this8.execute);
    _this8.job = job;
    _this8.id = id;
    _this8._bulk = job._bulk;

    // default error handler to keep the latest error
    _this8.on('error', function (error) {
      return _this8._error = error;
    });

    //
    // setup data streams
    //
    var converterOptions = {
      nullValue: '#N/A'
    };
    var uploadStream = _this8._uploadStream = new Serializable();
    var uploadDataStream = uploadStream.stream('csv', converterOptions);
    var downloadStream = _this8._downloadStream = new Parsable();
    var downloadDataStream = downloadStream.stream('csv', converterOptions);
    _this8.on('finish', function () {
      return uploadStream.end();
    });
    uploadDataStream.once('readable', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
      return _regeneratorRuntime.wrap(function _callee8$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              _context14.prev = 0;
              _context14.next = 3;
              return _this8.job.ready();
            case 3:
              // pipe upload data to batch API request stream
              uploadDataStream.pipe(_this8._createRequestStream());
              _context14.next = 9;
              break;
            case 6:
              _context14.prev = 6;
              _context14.t0 = _context14["catch"](0);
              _this8.emit('error', _context14.t0);
            case 9:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee8, null, [[0, 6]]);
    })));

    // duplex data stream, opened access to API programmers by Batch#stream()
    _this8._dataStream = concatStreamsAsDuplex(uploadDataStream, downloadDataStream);
    return _this8;
  }

  /**
   * Connect batch API and create stream instance of request/response
   *
   * @private
   */
  _createClass(Batch, [{
    key: "_createRequestStream",
    value: function _createRequestStream() {
      var _this9 = this;
      var bulk = this._bulk;
      var logger = bulk._logger;
      var req = bulk._request({
        method: 'POST',
        path: '/job/' + this.job.id + '/batch',
        headers: {
          'Content-Type': 'text/csv'
        },
        responseType: 'application/xml'
      });
      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var _res2;
        return _regeneratorRuntime.wrap(function _callee9$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.prev = 0;
                _context15.next = 3;
                return req;
              case 3:
                _res2 = _context15.sent;
                logger.debug(_res2.batchInfo);
                _this9.id = _res2.batchInfo.id;
                _this9.emit('queue', _res2.batchInfo);
                _context15.next = 12;
                break;
              case 9:
                _context15.prev = 9;
                _context15.t0 = _context15["catch"](0);
                _this9.emit('error', _context15.t0);
              case 12:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee9, null, [[0, 9]]);
      }))();
      return req.stream();
    }
    /**
     * Implementation of Writable
     */
  }, {
    key: "_write",
    value: function _write(record_, enc, cb) {
      var Id = record_.Id,
        type = record_.type,
        attributes = record_.attributes,
        rrec = _objectWithoutProperties(record_, ["Id", "type", "attributes"]);
      var record;
      switch (this.job.operation) {
        case 'insert':
          record = rrec;
          break;
        case 'delete':
        case 'hardDelete':
          record = {
            Id: Id
          };
          break;
        default:
          record = _objectSpread({
            Id: Id
          }, rrec);
      }
      this._uploadStream.write(record, enc, cb);
    }
    /**
     * Returns duplex stream which accepts CSV data input and batch result output
     */
  }, {
    key: "stream",
    value: function stream() {
      return this._dataStream;
    }
    /**
     * Execute batch operation
     */
  }, {
    key: "execute",
    value: function execute(input) {
      var _this10 = this;
      // if batch is already executed
      if (this._result) {
        throw new Error('Batch already executed.');
      }
      this._result = new _Promise(function (resolve, reject) {
        _this10.once('response', resolve);
        _this10.once('error', reject);
      });
      if (isObject(input) && 'pipe' in input && isFunction(input.pipe)) {
        // if input has stream.Readable interface
        input.pipe(this._dataStream);
      } else {
        if (_Array$isArray(input)) {
          var _iterator = _createForOfIteratorHelper(input),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var record = _step.value;
              for (var _i = 0, _Object$keys = _Object$keys2(record); _i < _Object$keys.length; _i++) {
                var key = _Object$keys[_i];
                if (typeof record[key] === 'boolean') {
                  record[key] = String(record[key]);
                }
              }
              this.write(record);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          this.end();
        } else if (typeof input === 'string') {
          this._dataStream.write(input, 'utf8');
          this._dataStream.end();
        }
      }

      // return Batch instance for chaining
      return this;
    }
  }, {
    key: "then",
    /**
     * Promise/A+ interface
     * Delegate to promise, return promise instance for batch result
     */
    value: function then(onResolved, onReject) {
      if (!this._result) {
        this.execute();
      }
      return this._result.then(onResolved, onReject);
    }
    /**
     * Check the latest batch status in server
     */
  }, {
    key: "check",
    value: function () {
      var _check = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var bulk, logger, jobId, batchId, res;
        return _regeneratorRuntime.wrap(function _callee10$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                bulk = this._bulk;
                logger = bulk._logger;
                jobId = this.job.id;
                batchId = this.id;
                if (!(!jobId || !batchId)) {
                  _context16.next = 6;
                  break;
                }
                throw new Error('Batch not started.');
              case 6:
                _context16.next = 8;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch/' + batchId,
                  responseType: 'application/xml'
                });
              case 8:
                res = _context16.sent;
                logger.debug(res.batchInfo);
                return _context16.abrupt("return", res.batchInfo);
              case 11:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee10, this);
      }));
      function check() {
        return _check.apply(this, arguments);
      }
      return check;
    }()
    /**
     * Polling the batch result and retrieve
     */
  }, {
    key: "poll",
    value: function poll(interval, timeout) {
      var _this11 = this;
      var jobId = this.job.id;
      var batchId = this.id;
      if (!jobId || !batchId) {
        throw new Error('Batch not started.');
      }
      var startTime = new Date().getTime();
      var poll = /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
          var now, _err, res;
          return _regeneratorRuntime.wrap(function _callee11$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  now = new Date().getTime();
                  if (!(startTime + timeout < now)) {
                    _context17.next = 5;
                    break;
                  }
                  _err = new PollingTimeoutError('Polling time out. Job Id = ' + jobId + ' , batch Id = ' + batchId, jobId, batchId);
                  _this11.emit('error', _err);
                  return _context17.abrupt("return");
                case 5:
                  _context17.prev = 5;
                  _context17.next = 8;
                  return _this11.check();
                case 8:
                  res = _context17.sent;
                  _context17.next = 15;
                  break;
                case 11:
                  _context17.prev = 11;
                  _context17.t0 = _context17["catch"](5);
                  _this11.emit('error', _context17.t0);
                  return _context17.abrupt("return");
                case 15:
                  if (res.state === 'Failed') {
                    if (_parseInt(res.numberRecordsProcessed, 10) > 0) {
                      _this11.retrieve();
                    } else {
                      _this11.emit('error', new Error(res.stateMessage));
                    }
                  } else if (res.state === 'Completed') {
                    _this11.retrieve();
                  } else {
                    _this11.emit('progress', res);
                    _setTimeout(poll, interval);
                  }
                case 16:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee11, null, [[5, 11]]);
        }));
        return function poll() {
          return _ref7.apply(this, arguments);
        };
      }();
      _setTimeout(poll, interval);
    }
    /**
     * Retrieve batch result
     */
  }, {
    key: "retrieve",
    value: function () {
      var _retrieve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
        var bulk, jobId, job, batchId, resp, results, _context18, _res3, resultId, _res4;
        return _regeneratorRuntime.wrap(function _callee12$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                bulk = this._bulk;
                jobId = this.job.id;
                job = this.job;
                batchId = this.id;
                if (!(!jobId || !batchId)) {
                  _context19.next = 6;
                  break;
                }
                throw new Error('Batch not started.');
              case 6:
                _context19.prev = 6;
                _context19.next = 9;
                return bulk._request({
                  method: 'GET',
                  path: '/job/' + jobId + '/batch/' + batchId + '/result'
                });
              case 9:
                resp = _context19.sent;
                if (job.operation === 'query' || job.operation === 'queryAll') {
                  _res3 = resp;
                  resultId = _res3['result-list'].result;
                  results = _mapInstanceProperty(_context18 = _Array$isArray(resultId) ? resultId : [resultId]).call(_context18, function (id) {
                    return {
                      id: id,
                      batchId: batchId,
                      jobId: jobId
                    };
                  });
                } else {
                  _res4 = resp;
                  results = _mapInstanceProperty(_res4).call(_res4, function (ret) {
                    return {
                      id: ret.Id || null,
                      success: ret.Success === 'true',
                      errors: ret.Error ? [ret.Error] : []
                    };
                  });
                }
                this.emit('response', results);
                return _context19.abrupt("return", results);
              case 15:
                _context19.prev = 15;
                _context19.t0 = _context19["catch"](6);
                this.emit('error', _context19.t0);
                throw _context19.t0;
              case 19:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee12, this, [[6, 15]]);
      }));
      function retrieve() {
        return _retrieve.apply(this, arguments);
      }
      return retrieve;
    }()
    /**
     * Fetch query result as a record stream
     * @param {String} resultId - Result id
     * @returns {RecordStream} - Record stream, convertible to CSV data stream
     */
  }, {
    key: "result",
    value: function result(resultId) {
      var jobId = this.job.id;
      var batchId = this.id;
      if (!jobId || !batchId) {
        throw new Error('Batch not started.');
      }
      var resultStream = new Parsable();
      var resultDataStream = resultStream.stream('csv');
      this._bulk._request({
        method: 'GET',
        path: '/job/' + jobId + '/batch/' + batchId + '/result/' + resultId,
        responseType: 'application/octet-stream'
      }).stream().pipe(resultDataStream);
      return resultStream;
    }
  }]);
  return Batch;
}(Writable);

/*--------------------------------------------*/
/**
 *
 */
var BulkApi = /*#__PURE__*/function (_HttpApi) {
  _inherits(BulkApi, _HttpApi);
  var _super5 = _createSuper(BulkApi);
  function BulkApi() {
    _classCallCheck(this, BulkApi);
    return _super5.apply(this, arguments);
  }
  _createClass(BulkApi, [{
    key: "beforeSend",
    value: function beforeSend(request) {
      var _this$_conn$accessTok;
      request.headers = _objectSpread(_objectSpread({}, request.headers), {}, {
        'X-SFDC-SESSION': (_this$_conn$accessTok = this._conn.accessToken) !== null && _this$_conn$accessTok !== void 0 ? _this$_conn$accessTok : ''
      });
    }
  }, {
    key: "isSessionExpired",
    value: function isSessionExpired(response) {
      return response.statusCode === 400 && /<exceptionCode>InvalidSessionId<\/exceptionCode>/.test(response.body);
    }
  }, {
    key: "hasErrorInResponseBody",
    value: function hasErrorInResponseBody(body) {
      return !!body.error;
    }
  }, {
    key: "parseError",
    value: function parseError(body) {
      return {
        errorCode: body.error.exceptionCode,
        message: body.error.exceptionMessage
      };
    }
  }]);
  return BulkApi;
}(HttpApi);
var BulkApiV2 = /*#__PURE__*/function (_HttpApi2) {
  _inherits(BulkApiV2, _HttpApi2);
  var _super6 = _createSuper(BulkApiV2);
  function BulkApiV2() {
    _classCallCheck(this, BulkApiV2);
    return _super6.apply(this, arguments);
  }
  _createClass(BulkApiV2, [{
    key: "hasErrorInResponseBody",
    value: function hasErrorInResponseBody(body) {
      return _Array$isArray(body) && _typeof(body[0]) === 'object' && 'errorCode' in body[0];
    }
  }, {
    key: "isSessionExpired",
    value: function isSessionExpired(response) {
      return response.statusCode === 401 && /INVALID_SESSION_ID/.test(response.body);
    }
  }, {
    key: "parseError",
    value: function parseError(body) {
      return {
        errorCode: body[0].errorCode,
        message: body[0].message
      };
    }
  }]);
  return BulkApiV2;
}(HttpApi);
/*--------------------------------------------*/
/**
 * Class for Bulk API
 *
 * @class
 */
export var Bulk = /*#__PURE__*/function () {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   * @type {Number}
   */

  /**
   *
   */
  function Bulk(conn) {
    _classCallCheck(this, Bulk);
    _defineProperty(this, "_conn", void 0);
    _defineProperty(this, "_logger", void 0);
    _defineProperty(this, "pollInterval", 1000);
    _defineProperty(this, "pollTimeout", 10000);
    this._conn = conn;
    this._logger = conn._logger;
  }

  /**
   *
   */
  _createClass(Bulk, [{
    key: "_request",
    value: function _request(request_) {
      var conn = this._conn;
      var path = request_.path,
        responseType = request_.responseType,
        rreq = _objectWithoutProperties(request_, ["path", "responseType"]);
      var baseUrl = [conn.instanceUrl, 'services/async', conn.version].join('/');
      var request = _objectSpread(_objectSpread({}, rreq), {}, {
        url: baseUrl + path
      });
      return new BulkApi(this._conn, {
        responseType: responseType
      }).request(request);
    }
    /**
     * Create and start bulkload job and batch
     */
  }, {
    key: "load",
    value: function load(type, operation, optionsOrInput, input) {
      var _this12 = this;
      var options = {};
      if (typeof optionsOrInput === 'string' || _Array$isArray(optionsOrInput) || isObject(optionsOrInput) && 'pipe' in optionsOrInput && typeof optionsOrInput.pipe === 'function') {
        // when options is not plain hash object, it is omitted
        input = optionsOrInput;
      } else {
        options = optionsOrInput;
      }
      var job = this.createJob(type, operation, options);
      var batch = job.createBatch();
      var cleanup = function cleanup() {
        return job.close();
      };
      var cleanupOnError = function cleanupOnError(err) {
        if (err.name !== 'PollingTimeout') {
          cleanup();
        }
      };
      batch.on('response', cleanup);
      batch.on('error', cleanupOnError);
      batch.on('queue', function () {
        batch === null || batch === void 0 ? void 0 : batch.poll(_this12.pollInterval, _this12.pollTimeout);
      });
      return batch.execute(input);
    }
    /**
     * Execute bulk query and get record stream
     */
  }, {
    key: "query",
    value: function query(soql) {
      var _this13 = this;
      var m = soql.replace(/\([\s\S]+\)/g, '').match(/FROM\s+(\w+)/i);
      if (!m) {
        throw new Error('No sobject type found in query, maybe caused by invalid SOQL.');
      }
      var type = m[1];
      var recordStream = new Parsable();
      var dataStream = recordStream.stream('csv');
      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
        var results, streams;
        return _regeneratorRuntime.wrap(function _callee13$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.prev = 0;
                _context20.next = 3;
                return _this13.load(type, 'query', soql);
              case 3:
                results = _context20.sent;
                streams = _mapInstanceProperty(results).call(results, function (result) {
                  return _this13.job(result.jobId).batch(result.batchId).result(result.id).stream();
                });
                joinStreams(streams).pipe(dataStream);
                _context20.next = 11;
                break;
              case 8:
                _context20.prev = 8;
                _context20.t0 = _context20["catch"](0);
                recordStream.emit('error', _context20.t0);
              case 11:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee13, null, [[0, 8]]);
      }))();
      return recordStream;
    }
    /**
     * Create a new job instance
     */
  }, {
    key: "createJob",
    value: function createJob(type, operation) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return new Job(this, type, operation, options);
    }
    /**
     * Get a job instance specified by given job ID
     *
     * @param {String} jobId - Job ID
     * @returns {Bulk~Job}
     */
  }, {
    key: "job",
    value: function job(jobId) {
      return new Job(this, null, null, null, jobId);
    }
  }]);
  return Bulk;
}();
var _connection = new _WeakMap();
export var BulkV2 = /*#__PURE__*/function () {
  /**
   * Polling interval in milliseconds
   */

  /**
   * Polling timeout in milliseconds
   * @type {Number}
   */

  function BulkV2(connection) {
    _classCallCheck(this, BulkV2);
    _connection.set(this, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "pollInterval", 1000);
    _defineProperty(this, "pollTimeout", 10000);
    _classPrivateFieldSet(this, _connection, connection);
  }

  /**
   * Create a new job instance
   */
  _createClass(BulkV2, [{
    key: "createJob",
    value: function createJob(options) {
      return new IngestJobV2({
        connection: _classPrivateFieldGet(this, _connection),
        jobInfo: options,
        pollingOptions: this
      });
    }
  }, {
    key: "job",
    value: function job(options) {
      return new IngestJobV2({
        connection: _classPrivateFieldGet(this, _connection),
        jobInfo: options,
        pollingOptions: this
      });
    }
    /**
     * Create, upload, and start bulkload job
     */
  }, {
    key: "loadAndWaitForResults",
    value: function () {
      var _loadAndWaitForResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(options) {
        var job;
        return _regeneratorRuntime.wrap(function _callee14$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                job = this.createJob(options);
                _context21.prev = 1;
                _context21.next = 4;
                return job.open();
              case 4:
                _context21.next = 6;
                return job.uploadData(options.input);
              case 6:
                _context21.next = 8;
                return job.close();
              case 8:
                _context21.next = 10;
                return job.poll(options.pollInterval, options.pollTimeout);
              case 10:
                _context21.next = 12;
                return job.getAllResults();
              case 12:
                return _context21.abrupt("return", _context21.sent);
              case 15:
                _context21.prev = 15;
                _context21.t0 = _context21["catch"](1);
                if (_context21.t0.name !== 'JobPollingTimeoutError') {
                  // fires off one last attempt to clean up and ignores the result | error
                  job.delete().catch(function (ignored) {
                    return ignored;
                  });
                }
                throw _context21.t0;
              case 19:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee14, this, [[1, 15]]);
      }));
      function loadAndWaitForResults(_x2) {
        return _loadAndWaitForResults.apply(this, arguments);
      }
      return loadAndWaitForResults;
    }()
    /**
     * Execute bulk query and get record stream
     */
  }, {
    key: "query",
    value: function () {
      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(soql, options) {
        var queryJob;
        return _regeneratorRuntime.wrap(function _callee15$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                queryJob = new QueryJobV2({
                  connection: _classPrivateFieldGet(this, _connection),
                  operation: 'query',
                  query: soql,
                  pollingOptions: this
                });
                _context22.prev = 1;
                _context22.next = 4;
                return queryJob.open();
              case 4:
                _context22.next = 6;
                return queryJob.poll(options === null || options === void 0 ? void 0 : options.pollInterval, options === null || options === void 0 ? void 0 : options.pollTimeout);
              case 6:
                _context22.next = 8;
                return queryJob.getResults();
              case 8:
                return _context22.abrupt("return", _context22.sent);
              case 11:
                _context22.prev = 11;
                _context22.t0 = _context22["catch"](1);
                if (_context22.t0.name !== 'JobPollingTimeoutError') {
                  // fires off one last attempt to clean up and ignores the result | error
                  queryJob.delete().catch(function (ignored) {
                    return ignored;
                  });
                }
                throw _context22.t0;
              case 15:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee15, this, [[1, 11]]);
      }));
      function query(_x3, _x4) {
        return _query.apply(this, arguments);
      }
      return query;
    }()
  }]);
  return BulkV2;
}();
var _connection2 = new _WeakMap();
var _operation2 = new _WeakMap();
var _query2 = new _WeakMap();
var _pollingOptions = new _WeakMap();
var _queryResults = new _WeakMap();
var _error = new _WeakMap();
export var QueryJobV2 = /*#__PURE__*/function (_EventEmitter2) {
  _inherits(QueryJobV2, _EventEmitter2);
  var _super7 = _createSuper(QueryJobV2);
  function QueryJobV2(options) {
    var _this14;
    _classCallCheck(this, QueryJobV2);
    _this14 = _super7.call(this);
    _connection2.set(_assertThisInitialized(_this14), {
      writable: true,
      value: void 0
    });
    _operation2.set(_assertThisInitialized(_this14), {
      writable: true,
      value: void 0
    });
    _query2.set(_assertThisInitialized(_this14), {
      writable: true,
      value: void 0
    });
    _pollingOptions.set(_assertThisInitialized(_this14), {
      writable: true,
      value: void 0
    });
    _queryResults.set(_assertThisInitialized(_this14), {
      writable: true,
      value: void 0
    });
    _error.set(_assertThisInitialized(_this14), {
      writable: true,
      value: void 0
    });
    _defineProperty(_assertThisInitialized(_this14), "jobInfo", void 0);
    _defineProperty(_assertThisInitialized(_this14), "locator", void 0);
    _defineProperty(_assertThisInitialized(_this14), "finished", false);
    _classPrivateFieldSet(_assertThisInitialized(_this14), _connection2, options.connection);
    _classPrivateFieldSet(_assertThisInitialized(_this14), _operation2, options.operation);
    _classPrivateFieldSet(_assertThisInitialized(_this14), _query2, options.query);
    _classPrivateFieldSet(_assertThisInitialized(_this14), _pollingOptions, options.pollingOptions);
    // default error handler to keep the latest error
    _this14.on('error', function (error) {
      return _classPrivateFieldSet(_assertThisInitialized(_this14), _error, error);
    });
    return _this14;
  }
  _createClass(QueryJobV2, [{
    key: "open",
    value: function () {
      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {
        return _regeneratorRuntime.wrap(function _callee16$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.prev = 0;
                _context23.next = 3;
                return this.createQueryRequest({
                  method: 'POST',
                  path: '',
                  body: _JSON$stringify({
                    operation: _classPrivateFieldGet(this, _operation2),
                    query: _classPrivateFieldGet(this, _query2)
                  }),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 3:
                this.jobInfo = _context23.sent;
                this.emit('open');
                _context23.next = 11;
                break;
              case 7:
                _context23.prev = 7;
                _context23.t0 = _context23["catch"](0);
                this.emit('error', _context23.t0);
                throw _context23.t0;
              case 11:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee16, this, [[0, 7]]);
      }));
      function open() {
        return _open.apply(this, arguments);
      }
      return open;
    }()
    /**
     * Set the status to abort
     */
  }, {
    key: "abort",
    value: function () {
      var _abort2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
        var _this$jobInfo, state;
        return _regeneratorRuntime.wrap(function _callee17$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.prev = 0;
                state = 'Aborted';
                _context24.next = 4;
                return this.createQueryRequest({
                  method: 'PATCH',
                  path: "/".concat((_this$jobInfo = this.jobInfo) === null || _this$jobInfo === void 0 ? void 0 : _this$jobInfo.id),
                  body: _JSON$stringify({
                    state: state
                  }),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 4:
                this.jobInfo = _context24.sent;
                this.emit('aborted');
                _context24.next = 12;
                break;
              case 8:
                _context24.prev = 8;
                _context24.t0 = _context24["catch"](0);
                this.emit('error', _context24.t0);
                throw _context24.t0;
              case 12:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee17, this, [[0, 8]]);
      }));
      function abort() {
        return _abort2.apply(this, arguments);
      }
      return abort;
    }()
  }, {
    key: "poll",
    value: function () {
      var _poll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        var interval,
          timeout,
          jobId,
          startTime,
          _res5,
          timeoutError,
          _args18 = arguments;
        return _regeneratorRuntime.wrap(function _callee18$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                interval = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : _classPrivateFieldGet(this, _pollingOptions).pollInterval;
                timeout = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : _classPrivateFieldGet(this, _pollingOptions).pollTimeout;
                jobId = getJobIdOrError(this.jobInfo);
                startTime = _Date$now();
              case 4:
                if (!(startTime + timeout > _Date$now())) {
                  _context25.next = 29;
                  break;
                }
                _context25.prev = 5;
                _context25.next = 8;
                return this.check();
              case 8:
                _res5 = _context25.sent;
                _context25.t0 = _res5.state;
                _context25.next = _context25.t0 === 'Open' ? 12 : _context25.t0 === 'Aborted' ? 13 : _context25.t0 === 'UploadComplete' ? 14 : _context25.t0 === 'InProgress' ? 14 : _context25.t0 === 'Failed' ? 17 : _context25.t0 === 'JobComplete' ? 19 : 21;
                break;
              case 12:
                throw new Error('Job has not been started');
              case 13:
                throw new Error('Job has been aborted');
              case 14:
                _context25.next = 16;
                return delay(interval);
              case 16:
                return _context25.abrupt("break", 21);
              case 17:
                this.emit('failed');
                return _context25.abrupt("return");
              case 19:
                this.emit('jobcomplete');
                return _context25.abrupt("return");
              case 21:
                _context25.next = 27;
                break;
              case 23:
                _context25.prev = 23;
                _context25.t1 = _context25["catch"](5);
                this.emit('error', _context25.t1);
                throw _context25.t1;
              case 27:
                _context25.next = 4;
                break;
              case 29:
                timeoutError = new JobPollingTimeoutError("Polling time out. Job Id = ".concat(jobId), jobId);
                this.emit('error', timeoutError);
                throw timeoutError;
              case 32:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee18, this, [[5, 23]]);
      }));
      function poll() {
        return _poll.apply(this, arguments);
      }
      return poll;
    }()
    /**
     * Check the latest batch status in server
     */
  }, {
    key: "check",
    value: function () {
      var _check2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
        var jobInfo;
        return _regeneratorRuntime.wrap(function _callee19$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                _context26.prev = 0;
                _context26.next = 3;
                return this.createQueryRequest({
                  method: 'GET',
                  path: "/".concat(getJobIdOrError(this.jobInfo)),
                  responseType: 'application/json'
                });
              case 3:
                jobInfo = _context26.sent;
                this.jobInfo = jobInfo;
                return _context26.abrupt("return", jobInfo);
              case 8:
                _context26.prev = 8;
                _context26.t0 = _context26["catch"](0);
                this.emit('error', _context26.t0);
                throw _context26.t0;
              case 12:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee19, this, [[0, 8]]);
      }));
      function check() {
        return _check2.apply(this, arguments);
      }
      return check;
    }()
  }, {
    key: "request",
    value: function (_request2) {
      function request(_x5) {
        return _request2.apply(this, arguments);
      }
      request.toString = function () {
        return _request2.toString();
      };
      return request;
    }(function (request) {
      var _this15 = this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      // if request is simple string, regard it as url in GET method
      var request_ = typeof request === 'string' ? {
        method: 'GET',
        url: request
      } : request;
      var httpApi = new HttpApi(_classPrivateFieldGet(this, _connection2), options);
      httpApi.on('response', function (response) {
        _this15.locator = response.headers['sforce-locator'];
      });
      return httpApi.request(request_);
    })
  }, {
    key: "getResultsUrl",
    value: function getResultsUrl() {
      var _context27, _context28, _context29;
      var url = _concatInstanceProperty(_context27 = _concatInstanceProperty(_context28 = "".concat(_classPrivateFieldGet(this, _connection2).instanceUrl, "/services/data/v")).call(_context28, _classPrivateFieldGet(this, _connection2).version, "/jobs/query/")).call(_context27, getJobIdOrError(this.jobInfo), "/results");
      return this.locator ? _concatInstanceProperty(_context29 = "".concat(url, "?locator=")).call(_context29, this.locator) : url;
    }
  }, {
    key: "getResults",
    value: function () {
      var _getResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {
        var _context30, nextResults;
        return _regeneratorRuntime.wrap(function _callee20$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                if (!(this.finished && _classPrivateFieldGet(this, _queryResults))) {
                  _context31.next = 2;
                  break;
                }
                return _context31.abrupt("return", _classPrivateFieldGet(this, _queryResults));
              case 2:
                _classPrivateFieldSet(this, _queryResults, []);
              case 3:
                if (!(this.locator !== 'null')) {
                  _context31.next = 10;
                  break;
                }
                _context31.next = 6;
                return this.request({
                  method: 'GET',
                  url: this.getResultsUrl(),
                  headers: {
                    Accept: 'text/csv'
                  }
                });
              case 6:
                nextResults = _context31.sent;
                _classPrivateFieldSet(this, _queryResults, _concatInstanceProperty(_context30 = _classPrivateFieldGet(this, _queryResults)).call(_context30, nextResults));
                _context31.next = 3;
                break;
              case 10:
                this.finished = true;
                return _context31.abrupt("return", _classPrivateFieldGet(this, _queryResults));
              case 12:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee20, this);
      }));
      function getResults() {
        return _getResults.apply(this, arguments);
      }
      return getResults;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {
        return _regeneratorRuntime.wrap(function _callee21$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                return _context32.abrupt("return", this.createQueryRequest({
                  method: 'DELETE',
                  path: "/".concat(getJobIdOrError(this.jobInfo))
                }));
              case 1:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee21, this);
      }));
      function _delete() {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }()
  }, {
    key: "createQueryRequest",
    value: function createQueryRequest(request) {
      var path = request.path,
        responseType = request.responseType;
      var baseUrl = [_classPrivateFieldGet(this, _connection2).instanceUrl, 'services/data', "v".concat(_classPrivateFieldGet(this, _connection2).version), 'jobs/query'].join('/');
      return new BulkApiV2(_classPrivateFieldGet(this, _connection2), {
        responseType: responseType
      }).request(_objectSpread(_objectSpread({}, request), {}, {
        url: baseUrl + path
      }));
    }
  }]);
  return QueryJobV2;
}(EventEmitter);

/**
 * Class for Bulk API V2 Ingest Job
 */
var _connection3 = new _WeakMap();
var _pollingOptions2 = new _WeakMap();
var _jobData = new _WeakMap();
var _bulkJobSuccessfulResults = new _WeakMap();
var _bulkJobFailedResults = new _WeakMap();
var _bulkJobUnprocessedRecords = new _WeakMap();
var _error2 = new _WeakMap();
export var IngestJobV2 = /*#__PURE__*/function (_EventEmitter3) {
  _inherits(IngestJobV2, _EventEmitter3);
  var _super8 = _createSuper(IngestJobV2);
  /**
   *
   */
  function IngestJobV2(options) {
    var _this16;
    _classCallCheck(this, IngestJobV2);
    _this16 = _super8.call(this);
    _connection3.set(_assertThisInitialized(_this16), {
      writable: true,
      value: void 0
    });
    _pollingOptions2.set(_assertThisInitialized(_this16), {
      writable: true,
      value: void 0
    });
    _jobData.set(_assertThisInitialized(_this16), {
      writable: true,
      value: void 0
    });
    _bulkJobSuccessfulResults.set(_assertThisInitialized(_this16), {
      writable: true,
      value: void 0
    });
    _bulkJobFailedResults.set(_assertThisInitialized(_this16), {
      writable: true,
      value: void 0
    });
    _bulkJobUnprocessedRecords.set(_assertThisInitialized(_this16), {
      writable: true,
      value: void 0
    });
    _error2.set(_assertThisInitialized(_this16), {
      writable: true,
      value: void 0
    });
    _defineProperty(_assertThisInitialized(_this16), "jobInfo", void 0);
    _classPrivateFieldSet(_assertThisInitialized(_this16), _connection3, options.connection);
    _classPrivateFieldSet(_assertThisInitialized(_this16), _pollingOptions2, options.pollingOptions);
    _this16.jobInfo = options.jobInfo;
    _classPrivateFieldSet(_assertThisInitialized(_this16), _jobData, new JobDataV2({
      createRequest: function createRequest(request) {
        return _this16.createIngestRequest(request);
      },
      job: _assertThisInitialized(_this16)
    }));
    // default error handler to keep the latest error
    _this16.on('error', function (error) {
      return _classPrivateFieldSet(_assertThisInitialized(_this16), _error2, error);
    });
    return _this16;
  }
  _createClass(IngestJobV2, [{
    key: "open",
    value: function () {
      var _open2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {
        var _this$jobInfo2, _this$jobInfo3, _this$jobInfo4, _this$jobInfo5, _this$jobInfo6;
        return _regeneratorRuntime.wrap(function _callee22$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                _context33.prev = 0;
                _context33.next = 3;
                return this.createIngestRequest({
                  method: 'POST',
                  path: '',
                  body: _JSON$stringify({
                    assignmentRuleId: (_this$jobInfo2 = this.jobInfo) === null || _this$jobInfo2 === void 0 ? void 0 : _this$jobInfo2.assignmentRuleId,
                    externalIdFieldName: (_this$jobInfo3 = this.jobInfo) === null || _this$jobInfo3 === void 0 ? void 0 : _this$jobInfo3.externalIdFieldName,
                    object: (_this$jobInfo4 = this.jobInfo) === null || _this$jobInfo4 === void 0 ? void 0 : _this$jobInfo4.object,
                    operation: (_this$jobInfo5 = this.jobInfo) === null || _this$jobInfo5 === void 0 ? void 0 : _this$jobInfo5.operation,
                    lineEnding: (_this$jobInfo6 = this.jobInfo) === null || _this$jobInfo6 === void 0 ? void 0 : _this$jobInfo6.lineEnding
                  }),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 3:
                this.jobInfo = _context33.sent;
                this.emit('open');
                _context33.next = 11;
                break;
              case 7:
                _context33.prev = 7;
                _context33.t0 = _context33["catch"](0);
                this.emit('error', _context33.t0);
                throw _context33.t0;
              case 11:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee22, this, [[0, 7]]);
      }));
      function open() {
        return _open2.apply(this, arguments);
      }
      return open;
    }()
  }, {
    key: "uploadData",
    value: function () {
      var _uploadData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(input) {
        return _regeneratorRuntime.wrap(function _callee23$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return _classPrivateFieldGet(this, _jobData).execute(input);
              case 2:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee23, this);
      }));
      function uploadData(_x6) {
        return _uploadData.apply(this, arguments);
      }
      return uploadData;
    }()
  }, {
    key: "getAllResults",
    value: function () {
      var _getAllResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {
        var _yield$Promise$all, _yield$Promise$all2, successfulResults, failedResults, unprocessedRecords;
        return _regeneratorRuntime.wrap(function _callee24$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                _context35.next = 2;
                return _Promise.all([this.getSuccessfulResults(), this.getFailedResults(), this.getUnprocessedRecords()]);
              case 2:
                _yield$Promise$all = _context35.sent;
                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);
                successfulResults = _yield$Promise$all2[0];
                failedResults = _yield$Promise$all2[1];
                unprocessedRecords = _yield$Promise$all2[2];
                return _context35.abrupt("return", {
                  successfulResults: successfulResults,
                  failedResults: failedResults,
                  unprocessedRecords: unprocessedRecords
                });
              case 8:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee24, this);
      }));
      function getAllResults() {
        return _getAllResults.apply(this, arguments);
      }
      return getAllResults;
    }()
    /**
     * Close opened job
     */
  }, {
    key: "close",
    value: function () {
      var _close2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {
        var state;
        return _regeneratorRuntime.wrap(function _callee25$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                _context36.prev = 0;
                state = 'UploadComplete';
                _context36.next = 4;
                return this.createIngestRequest({
                  method: 'PATCH',
                  path: "/".concat(this.jobInfo.id),
                  body: _JSON$stringify({
                    state: state
                  }),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 4:
                this.jobInfo = _context36.sent;
                this.emit('uploadcomplete');
                _context36.next = 12;
                break;
              case 8:
                _context36.prev = 8;
                _context36.t0 = _context36["catch"](0);
                this.emit('error', _context36.t0);
                throw _context36.t0;
              case 12:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee25, this, [[0, 8]]);
      }));
      function close() {
        return _close2.apply(this, arguments);
      }
      return close;
    }()
    /**
     * Set the status to abort
     */
  }, {
    key: "abort",
    value: function () {
      var _abort3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {
        var state;
        return _regeneratorRuntime.wrap(function _callee26$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                _context37.prev = 0;
                state = 'Aborted';
                _context37.next = 4;
                return this.createIngestRequest({
                  method: 'PATCH',
                  path: "/".concat(this.jobInfo.id),
                  body: _JSON$stringify({
                    state: state
                  }),
                  headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                  },
                  responseType: 'application/json'
                });
              case 4:
                this.jobInfo = _context37.sent;
                this.emit('aborted');
                _context37.next = 12;
                break;
              case 8:
                _context37.prev = 8;
                _context37.t0 = _context37["catch"](0);
                this.emit('error', _context37.t0);
                throw _context37.t0;
              case 12:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee26, this, [[0, 8]]);
      }));
      function abort() {
        return _abort3.apply(this, arguments);
      }
      return abort;
    }()
  }, {
    key: "poll",
    value: function () {
      var _poll2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {
        var interval,
          timeout,
          jobId,
          startTime,
          _res6,
          timeoutError,
          _args27 = arguments;
        return _regeneratorRuntime.wrap(function _callee27$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                interval = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : _classPrivateFieldGet(this, _pollingOptions2).pollInterval;
                timeout = _args27.length > 1 && _args27[1] !== undefined ? _args27[1] : _classPrivateFieldGet(this, _pollingOptions2).pollTimeout;
                jobId = getJobIdOrError(this.jobInfo);
                startTime = _Date$now();
              case 4:
                if (!(startTime + timeout > _Date$now())) {
                  _context38.next = 29;
                  break;
                }
                _context38.prev = 5;
                _context38.next = 8;
                return this.check();
              case 8:
                _res6 = _context38.sent;
                _context38.t0 = _res6.state;
                _context38.next = _context38.t0 === 'Open' ? 12 : _context38.t0 === 'Aborted' ? 13 : _context38.t0 === 'UploadComplete' ? 14 : _context38.t0 === 'InProgress' ? 14 : _context38.t0 === 'Failed' ? 17 : _context38.t0 === 'JobComplete' ? 19 : 21;
                break;
              case 12:
                throw new Error('Job has not been started');
              case 13:
                throw new Error('Job has been aborted');
              case 14:
                _context38.next = 16;
                return delay(interval);
              case 16:
                return _context38.abrupt("break", 21);
              case 17:
                this.emit('failed');
                return _context38.abrupt("return");
              case 19:
                this.emit('jobcomplete');
                return _context38.abrupt("return");
              case 21:
                _context38.next = 27;
                break;
              case 23:
                _context38.prev = 23;
                _context38.t1 = _context38["catch"](5);
                this.emit('error', _context38.t1);
                throw _context38.t1;
              case 27:
                _context38.next = 4;
                break;
              case 29:
                timeoutError = new JobPollingTimeoutError("Polling time out. Job Id = ".concat(jobId), jobId);
                this.emit('error', timeoutError);
                throw timeoutError;
              case 32:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee27, this, [[5, 23]]);
      }));
      function poll() {
        return _poll2.apply(this, arguments);
      }
      return poll;
    }()
    /**
     * Check the latest batch status in server
     */
  }, {
    key: "check",
    value: function () {
      var _check3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {
        var jobInfo;
        return _regeneratorRuntime.wrap(function _callee28$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                _context39.prev = 0;
                _context39.next = 3;
                return this.createIngestRequest({
                  method: 'GET',
                  path: "/".concat(getJobIdOrError(this.jobInfo)),
                  responseType: 'application/json'
                });
              case 3:
                jobInfo = _context39.sent;
                this.jobInfo = jobInfo;
                return _context39.abrupt("return", jobInfo);
              case 8:
                _context39.prev = 8;
                _context39.t0 = _context39["catch"](0);
                this.emit('error', _context39.t0);
                throw _context39.t0;
              case 12:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee28, this, [[0, 8]]);
      }));
      function check() {
        return _check3.apply(this, arguments);
      }
      return check;
    }()
  }, {
    key: "getSuccessfulResults",
    value: function () {
      var _getSuccessfulResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {
        var results;
        return _regeneratorRuntime.wrap(function _callee29$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                if (!_classPrivateFieldGet(this, _bulkJobSuccessfulResults)) {
                  _context40.next = 2;
                  break;
                }
                return _context40.abrupt("return", _classPrivateFieldGet(this, _bulkJobSuccessfulResults));
              case 2:
                _context40.next = 4;
                return this.createIngestRequest({
                  method: 'GET',
                  path: "/".concat(getJobIdOrError(this.jobInfo), "/successfulResults"),
                  responseType: 'text/csv'
                });
              case 4:
                results = _context40.sent;
                _classPrivateFieldSet(this, _bulkJobSuccessfulResults, results !== null && results !== void 0 ? results : []);
                return _context40.abrupt("return", _classPrivateFieldGet(this, _bulkJobSuccessfulResults));
              case 7:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee29, this);
      }));
      function getSuccessfulResults() {
        return _getSuccessfulResults.apply(this, arguments);
      }
      return getSuccessfulResults;
    }()
  }, {
    key: "getFailedResults",
    value: function () {
      var _getFailedResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {
        var results;
        return _regeneratorRuntime.wrap(function _callee30$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                if (!_classPrivateFieldGet(this, _bulkJobFailedResults)) {
                  _context41.next = 2;
                  break;
                }
                return _context41.abrupt("return", _classPrivateFieldGet(this, _bulkJobFailedResults));
              case 2:
                _context41.next = 4;
                return this.createIngestRequest({
                  method: 'GET',
                  path: "/".concat(getJobIdOrError(this.jobInfo), "/failedResults"),
                  responseType: 'text/csv'
                });
              case 4:
                results = _context41.sent;
                _classPrivateFieldSet(this, _bulkJobFailedResults, results !== null && results !== void 0 ? results : []);
                return _context41.abrupt("return", _classPrivateFieldGet(this, _bulkJobFailedResults));
              case 7:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee30, this);
      }));
      function getFailedResults() {
        return _getFailedResults.apply(this, arguments);
      }
      return getFailedResults;
    }()
  }, {
    key: "getUnprocessedRecords",
    value: function () {
      var _getUnprocessedRecords = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {
        var results;
        return _regeneratorRuntime.wrap(function _callee31$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                if (!_classPrivateFieldGet(this, _bulkJobUnprocessedRecords)) {
                  _context42.next = 2;
                  break;
                }
                return _context42.abrupt("return", _classPrivateFieldGet(this, _bulkJobUnprocessedRecords));
              case 2:
                _context42.next = 4;
                return this.createIngestRequest({
                  method: 'GET',
                  path: "/".concat(getJobIdOrError(this.jobInfo), "/unprocessedrecords"),
                  responseType: 'text/csv'
                });
              case 4:
                results = _context42.sent;
                _classPrivateFieldSet(this, _bulkJobUnprocessedRecords, results !== null && results !== void 0 ? results : []);
                return _context42.abrupt("return", _classPrivateFieldGet(this, _bulkJobUnprocessedRecords));
              case 7:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee31, this);
      }));
      function getUnprocessedRecords() {
        return _getUnprocessedRecords.apply(this, arguments);
      }
      return getUnprocessedRecords;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {
        return _regeneratorRuntime.wrap(function _callee32$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                return _context43.abrupt("return", this.createIngestRequest({
                  method: 'DELETE',
                  path: "/".concat(getJobIdOrError(this.jobInfo))
                }));
              case 1:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee32, this);
      }));
      function _delete() {
        return _delete3.apply(this, arguments);
      }
      return _delete;
    }()
  }, {
    key: "createIngestRequest",
    value: function createIngestRequest(request) {
      var path = request.path,
        responseType = request.responseType;
      var baseUrl = [_classPrivateFieldGet(this, _connection3).instanceUrl, 'services/data', "v".concat(_classPrivateFieldGet(this, _connection3).version), 'jobs/ingest'].join('/');
      return new BulkApiV2(_classPrivateFieldGet(this, _connection3), {
        responseType: responseType
      }).request(_objectSpread(_objectSpread({}, request), {}, {
        url: baseUrl + path
      }));
    }
  }, {
    key: "id",
    get: function get() {
      return this.jobInfo.id;
    }
  }]);
  return IngestJobV2;
}(EventEmitter);
var _job = new _WeakMap();
var _uploadStream = new _WeakMap();
var _downloadStream = new _WeakMap();
var _dataStream = new _WeakMap();
var _result = new _WeakMap();
var JobDataV2 = /*#__PURE__*/function (_Writable2) {
  _inherits(JobDataV2, _Writable2);
  var _super9 = _createSuper(JobDataV2);
  /**
   *
   */
  function JobDataV2(options) {
    var _this17;
    _classCallCheck(this, JobDataV2);
    _this17 = _super9.call(this, {
      objectMode: true
    });
    _job.set(_assertThisInitialized(_this17), {
      writable: true,
      value: void 0
    });
    _uploadStream.set(_assertThisInitialized(_this17), {
      writable: true,
      value: void 0
    });
    _downloadStream.set(_assertThisInitialized(_this17), {
      writable: true,
      value: void 0
    });
    _dataStream.set(_assertThisInitialized(_this17), {
      writable: true,
      value: void 0
    });
    _result.set(_assertThisInitialized(_this17), {
      writable: true,
      value: void 0
    });
    var createRequest = options.createRequest;
    _classPrivateFieldSet(_assertThisInitialized(_this17), _job, options.job);
    _classPrivateFieldSet(_assertThisInitialized(_this17), _uploadStream, new Serializable());
    _classPrivateFieldSet(_assertThisInitialized(_this17), _downloadStream, new Parsable());
    var converterOptions = {
      nullValue: '#N/A'
    };
    var uploadDataStream = _classPrivateFieldGet(_assertThisInitialized(_this17), _uploadStream).stream('csv', converterOptions);
    var downloadDataStream = _classPrivateFieldGet(_assertThisInitialized(_this17), _downloadStream).stream('csv', converterOptions);
    _classPrivateFieldSet(_assertThisInitialized(_this17), _dataStream, concatStreamsAsDuplex(uploadDataStream, downloadDataStream));
    _this17.on('finish', function () {
      return _classPrivateFieldGet(_assertThisInitialized(_this17), _uploadStream).end();
    });
    uploadDataStream.once('readable', function () {
      try {
        var _classPrivateFieldGet2;
        // pipe upload data to batch API request stream
        var req = createRequest({
          method: 'PUT',
          path: "/".concat((_classPrivateFieldGet2 = _classPrivateFieldGet(_assertThisInitialized(_this17), _job).jobInfo) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.id, "/batches"),
          headers: {
            'Content-Type': 'text/csv'
          },
          responseType: 'application/json'
        });
        _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {
          var _res7;
          return _regeneratorRuntime.wrap(function _callee33$(_context44) {
            while (1) {
              switch (_context44.prev = _context44.next) {
                case 0:
                  _context44.prev = 0;
                  _context44.next = 3;
                  return req;
                case 3:
                  _res7 = _context44.sent;
                  _this17.emit('response', _res7);
                  _context44.next = 10;
                  break;
                case 7:
                  _context44.prev = 7;
                  _context44.t0 = _context44["catch"](0);
                  _this17.emit('error', _context44.t0);
                case 10:
                case "end":
                  return _context44.stop();
              }
            }
          }, _callee33, null, [[0, 7]]);
        }))();
        uploadDataStream.pipe(req.stream());
      } catch (err) {
        _this17.emit('error', err);
      }
    });
    return _this17;
  }
  _createClass(JobDataV2, [{
    key: "_write",
    value: function _write(record_, enc, cb) {
      var Id = record_.Id,
        type = record_.type,
        attributes = record_.attributes,
        rrec = _objectWithoutProperties(record_, ["Id", "type", "attributes"]);
      var record;
      switch (_classPrivateFieldGet(this, _job).jobInfo.operation) {
        case 'insert':
          record = rrec;
          break;
        case 'delete':
        case 'hardDelete':
          record = {
            Id: Id
          };
          break;
        default:
          record = _objectSpread({
            Id: Id
          }, rrec);
      }
      _classPrivateFieldGet(this, _uploadStream).write(record, enc, cb);
    }
    /**
     * Returns duplex stream which accepts CSV data input and batch result output
     */
  }, {
    key: "stream",
    value: function stream() {
      return _classPrivateFieldGet(this, _dataStream);
    }
    /**
     * Execute batch operation
     */
  }, {
    key: "execute",
    value: function execute(input) {
      var _this18 = this;
      if (_classPrivateFieldGet(this, _result)) {
        throw new Error('Data can only be uploaded to a job once.');
      }
      _classPrivateFieldSet(this, _result, new _Promise(function (resolve, reject) {
        _this18.once('response', function () {
          return resolve();
        });
        _this18.once('error', reject);
      }));
      if (isObject(input) && 'pipe' in input && isFunction(input.pipe)) {
        // if input has stream.Readable interface
        input.pipe(_classPrivateFieldGet(this, _dataStream));
      } else {
        if (_Array$isArray(input)) {
          var _iterator2 = _createForOfIteratorHelper(input),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var record = _step2.value;
              for (var _i2 = 0, _Object$keys3 = _Object$keys2(record); _i2 < _Object$keys3.length; _i2++) {
                var key = _Object$keys3[_i2];
                if (typeof record[key] === 'boolean') {
                  record[key] = String(record[key]);
                }
              }
              this.write(record);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          this.end();
        } else if (typeof input === 'string') {
          _classPrivateFieldGet(this, _dataStream).write(input, 'utf8');
          _classPrivateFieldGet(this, _dataStream).end();
        }
      }
      return this;
    }
    /**
     * Promise/A+ interface
     * Delegate to promise, return promise instance for batch result
     */
  }, {
    key: "then",
    value: function then(onResolved, onReject) {
      if (_classPrivateFieldGet(this, _result) === undefined) {
        this.execute();
      }
      return _classPrivateFieldGet(this, _result).then(onResolved, onReject);
    }
  }]);
  return JobDataV2;
}(Writable);
function getJobIdOrError(jobInfo) {
  var jobId = jobInfo === null || jobInfo === void 0 ? void 0 : jobInfo.id;
  if (jobId === undefined) {
    throw new Error('No job id, maybe you need to call `job.open()` first.');
  }
  return jobId;
}
function delay(ms) {
  return new _Promise(function (resolve) {
    return _setTimeout(resolve, ms);
  });
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
registerModule('bulk', function (conn) {
  return new Bulk(conn);
});
registerModule('bulk2', function (conn) {
  return new BulkV2(conn);
});
export default Bulk;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,