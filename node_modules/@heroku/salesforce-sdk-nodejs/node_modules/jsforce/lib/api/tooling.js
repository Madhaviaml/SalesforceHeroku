"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");
require("core-js/modules/es.array.iterator");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tooling = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));
var _jsforce = require("../jsforce");
var _connection = _interopRequireDefault(require("../connection"));
var _cache = _interopRequireDefault(require("../cache"));
/**
 * @file Manages Tooling APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

/**
 *
 */

/**
 *
 */
const {
  query,
  queryMore,
  create,
  _createSingle,
  _createMany,
  _createParallel,
  retrieve,
  _retrieveSingle,
  _retrieveParallel,
  _retrieveMany,
  update,
  _updateSingle,
  _updateParallel,
  _updateMany,
  upsert,
  destroy,
  _destroySingle,
  _destroyParallel,
  _destroyMany,
  describe,
  describeGlobal,
  sobject
} = _connection.default.prototype;
const describeCacheKey = type => type ? `describe.${type}` : 'describe';

/**
 * API class for Tooling API call
 */
class Tooling {
  /**
   * Execute query by using SOQL
   */

  /**
   * Query next record set by using query locator
   */

  /**
   * Create records
   */

  /**
   * Synonym of Tooling#create()
   */

  /**
   * Retrieve specified records
   */

  /**
   * Update records
   */

  /**
   * Upsert records
   */

  /**
   * Delete records
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Synonym of Tooling#destroy()
   */

  /**
   * Describe SObject metadata
   */

  /**
   * Synonym of Tooling#describe()
   */

  /**
   * Describe global SObjects
   */

  /**
   * Get SObject instance
   */

  /**
   *
   */
  constructor(conn) {
    (0, _defineProperty2.default)(this, "_conn", void 0);
    (0, _defineProperty2.default)(this, "query", query);
    (0, _defineProperty2.default)(this, "queryMore", queryMore);
    (0, _defineProperty2.default)(this, "create", create);
    (0, _defineProperty2.default)(this, "_createSingle", _createSingle);
    (0, _defineProperty2.default)(this, "_createParallel", _createParallel);
    (0, _defineProperty2.default)(this, "_createMany", _createMany);
    (0, _defineProperty2.default)(this, "insert", create);
    (0, _defineProperty2.default)(this, "retrieve", retrieve);
    (0, _defineProperty2.default)(this, "_retrieveSingle", _retrieveSingle);
    (0, _defineProperty2.default)(this, "_retrieveParallel", _retrieveParallel);
    (0, _defineProperty2.default)(this, "_retrieveMany", _retrieveMany);
    (0, _defineProperty2.default)(this, "update", update);
    (0, _defineProperty2.default)(this, "_updateSingle", _updateSingle);
    (0, _defineProperty2.default)(this, "_updateParallel", _updateParallel);
    (0, _defineProperty2.default)(this, "_updateMany", _updateMany);
    (0, _defineProperty2.default)(this, "upsert", upsert);
    (0, _defineProperty2.default)(this, "destroy", destroy);
    (0, _defineProperty2.default)(this, "_destroySingle", _destroySingle);
    (0, _defineProperty2.default)(this, "_destroyParallel", _destroyParallel);
    (0, _defineProperty2.default)(this, "_destroyMany", _destroyMany);
    (0, _defineProperty2.default)(this, "delete", destroy);
    (0, _defineProperty2.default)(this, "del", destroy);
    (0, _defineProperty2.default)(this, "cache", new _cache.default());
    (0, _defineProperty2.default)(this, "describe", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'NOCACHE'
    }));
    (0, _defineProperty2.default)(this, "describe$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'HIT'
    }));
    (0, _defineProperty2.default)(this, "describe$$", this.cache.createCachedFunction(describe, this, {
      key: describeCacheKey,
      strategy: 'IMMEDIATE'
    }));
    (0, _defineProperty2.default)(this, "describeSObject", this.describe);
    (0, _defineProperty2.default)(this, "describeSObject$", this.describe$);
    (0, _defineProperty2.default)(this, "describeSObject$$", this.describe$$);
    (0, _defineProperty2.default)(this, "describeGlobal", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'NOCACHE'
    }));
    (0, _defineProperty2.default)(this, "describeGlobal$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'HIT'
    }));
    (0, _defineProperty2.default)(this, "describeGlobal$$", this.cache.createCachedFunction(describeGlobal, this, {
      key: 'describeGlobal',
      strategy: 'IMMEDIATE'
    }));
    (0, _defineProperty2.default)(this, "sobject", sobject);
    (0, _defineProperty2.default)(this, "sobjects", {});
    this._conn = conn;
  }

  /**
   * @private
   */
  _establish() {
    this.sobjects = {};
    this.cache.clear();
    this.cache.get('describeGlobal').removeAllListeners('value');
    this.cache.get('describeGlobal').on('value', res => {
      if (res.result) {
        for (const {
          name: type
        } of res.result.sobjects) {
          this.sobject(type);
        }
      }
    });
  }

  /**
   * @private
   */
  _baseUrl() {
    return this._conn._baseUrl() + '/tooling';
  }

  /**
   * @private
   */
  _supports(feature) {
    return this._conn._supports(feature);
  }

  /**
   *
   */
  request(request, options) {
    return this._conn.request(request, options);
  }

  /**
   * Executes Apex code anonymously
   */
  executeAnonymous(body) {
    const url = this._baseUrl() + '/executeAnonymous?anonymousBody=' + encodeURIComponent(body);
    return this.request(url);
  }

  /**
   * Executes Apex tests asynchronously
   */
  runTestsAsynchronous(req) {
    const url = this._baseUrl() + '/runTestsAsynchronous/';
    return this._conn.requestPost(url, req);
  }

  /**
   * Executes Apex tests synchronously
   */
  runTestsSynchronous(req) {
    const url = this._baseUrl() + '/runTestsSynchronous/';
    return this._conn.requestPost(url, req);
  }

  /**
   * Retrieves available code completions of the referenced type
   */
  completions(type = 'apex') {
    const url = this._baseUrl() + '/completions?type=' + encodeURIComponent(type);
    return this.request({
      method: 'GET',
      url,
      headers: {
        Accept: 'application/json'
      }
    });
  }
}

/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
exports.Tooling = Tooling;
(0, _jsforce.registerModule)('tooling', conn => new Tooling(conn));
var _default = Tooling;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,